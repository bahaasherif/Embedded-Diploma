
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f74  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080010a4  080010a4  000110a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010c4  080010c4  000110cc  2**0
                  CONTENTS
  4 .ARM          00000000  080010c4  080010c4  000110cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010c4  080010cc  000110cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010c4  080010c4  000110c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010c8  080010c8  000110c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000110cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000000  080010cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080010cc  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000110cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c71  00000000  00000000  000110f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001055  00000000  00000000  00017d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000012b6  00000000  00000000  00018dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002e0  00000000  00000000  0001a078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000258  00000000  00000000  0001a358  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002fe9  00000000  00000000  0001a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000036e5  00000000  00000000  0001d599  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c44c  00000000  00000000  00020c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002d0ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000097c  00000000  00000000  0002d148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800108c 	.word	0x0800108c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800108c 	.word	0x0800108c

08000170 <EEPROM_Init>:


#include <STM32F103C6_EEPROM.h>

void EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0

	I2C_Config_t I2C_Config;

	// I2C Controller ACT AS A  MASTER

	I2C_Config.I2C_General_Call = I2C_General_Call_Enable;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	623b      	str	r3, [r7, #32]
	I2C_Config.I2C_ACK_Control = I2C_ACK_Control_Enable;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	61fb      	str	r3, [r7, #28]
	I2C_Config.I2C_ClockSpeed = I2C_CLOCK_SPEED_100KHZ;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <EEPROM_Init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_Mode = I2C_Mode_I2C;
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_StretchMode = I2C_StretchMode_Enable;
 8000188:	2300      	movs	r3, #0
 800018a:	60bb      	str	r3, [r7, #8]
	I2C_Config.P_Slave_CallBack = NULL;
 800018c:	2300      	movs	r3, #0
 800018e:	627b      	str	r3, [r7, #36]	; 0x24

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <EEPROM_Init+0x3c>)
 8000192:	f000 fb17 	bl	80007c4 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C_Config);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <EEPROM_Init+0x3c>)
 800019c:	f000 f9fe 	bl	800059c <MCAL_I2C_Init>

}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <EEPROM_Write_NBytes>:

unsigned char EEPROM_Write_NBytes(unsigned int Memory_address , unsigned char *bytes , uint8_t Data_Length)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t buffer[256];
	buffer[0] = (uint8_t)(Memory_address>>8);   // Upper Byte Memory Address
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	f107 0314 	add.w	r3, r7, #20
 80001da:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(Memory_address);		// Lower Byte Memory Address
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	705a      	strb	r2, [r3, #1]

	for( i =2 ; i<(Data_Length+2) ; i++)
 80001ea:	2302      	movs	r3, #2
 80001ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001f0:	e011      	b.n	8000216 <EEPROM_Write_NBytes+0x66>
	{
		buffer[i]= bytes[i-2];
 80001f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f6:	3b02      	subs	r3, #2
 80001f8:	f107 0208 	add.w	r2, r7, #8
 80001fc:	6812      	ldr	r2, [r2, #0]
 80001fe:	441a      	add	r2, r3
 8000200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000204:	7811      	ldrb	r1, [r2, #0]
 8000206:	f107 0214 	add.w	r2, r7, #20
 800020a:	54d1      	strb	r1, [r2, r3]
	for( i =2 ; i<(Data_Length+2) ; i++)
 800020c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000210:	3301      	adds	r3, #1
 8000212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000216:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800021a:	1dfb      	adds	r3, r7, #7
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3302      	adds	r3, #2
 8000220:	429a      	cmp	r2, r3
 8000222:	dbe6      	blt.n	80001f2 <EEPROM_Write_NBytes+0x42>
	}

	MCAL_I2C_Master_Tx(I2C1, EEPROM_Slave_Address, buffer, (Data_Length+2), With_Stop, START);
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3302      	adds	r3, #2
 800022a:	b2d9      	uxtb	r1, r3
 800022c:	f107 0214 	add.w	r2, r7, #20
 8000230:	2300      	movs	r3, #0
 8000232:	9301      	str	r3, [sp, #4]
 8000234:	2300      	movs	r3, #0
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	460b      	mov	r3, r1
 800023a:	212a      	movs	r1, #42	; 0x2a
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <EEPROM_Write_NBytes+0xa0>)
 800023e:	f000 fba1 	bl	8000984 <MCAL_I2C_Master_Tx>

	return 0;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40005400 	.word	0x40005400

08000254 <EEPROM_Read_Byte>:

unsigned char EEPROM_Read_Byte(unsigned int address, unsigned char *dataOut, uint8_t dataLen)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af02      	add	r7, sp, #8
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	4613      	mov	r3, r2
 8000260:	71fb      	strb	r3, [r7, #7]

	uint8_t buffer[2];
	buffer[0] = (uint8_t)(address>>8);   // upper Byte Memory Address
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	b2db      	uxtb	r3, r3
 8000268:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)(address);		 // Lower Byte Memory Address
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	757b      	strb	r3, [r7, #21]

	// Write Address Only
	MCAL_I2C_Master_Tx(I2C1, EEPROM_Slave_Address, buffer, 2, Without_Stop, START);
 8000270:	f107 0214 	add.w	r2, r7, #20
 8000274:	2300      	movs	r3, #0
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	2301      	movs	r3, #1
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2302      	movs	r3, #2
 800027e:	212a      	movs	r1, #42	; 0x2a
 8000280:	4809      	ldr	r0, [pc, #36]	; (80002a8 <EEPROM_Read_Byte+0x54>)
 8000282:	f000 fb7f 	bl	8000984 <MCAL_I2C_Master_Tx>
	// Read Data with Repeat Start
	MCAL_I2C_Master_Rx(I2C1, EEPROM_Slave_Address, dataOut, dataLen, With_Stop, Repeated_START);
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2300      	movs	r3, #0
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	4613      	mov	r3, r2
 8000292:	68ba      	ldr	r2, [r7, #8]
 8000294:	212a      	movs	r1, #42	; 0x2a
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <EEPROM_Read_Byte+0x54>)
 8000298:	f000 fafa 	bl	8000890 <MCAL_I2C_Master_Rx>

	return 0;
 800029c:	2300      	movs	r3, #0

}
 800029e:	4618      	mov	r0, r3
 80002a0:	3718      	adds	r7, #24
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40005400 	.word	0x40005400

080002ac <clock_init>:
#include <Stm32_F103C6_I2C_driver.h>
#include <STM32F103C6_EEPROM.h>


void clock_init()
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <clock_init+0x30>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a09      	ldr	r2, [pc, #36]	; (80002dc <clock_init+0x30>)
 80002b6:	f043 0304 	orr.w	r3, r3, #4
 80002ba:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <clock_init+0x30>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <clock_init+0x30>)
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <clock_init+0x30>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a03      	ldr	r2, [pc, #12]	; (80002dc <clock_init+0x30>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6193      	str	r3, [r2, #24]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	40021000 	.word	0x40021000

080002e0 <main>:

int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0

	clock_init();
 80002e6:	f7ff ffe1 	bl	80002ac <clock_init>

	//Test case 1
	uint8_t ch1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 80002ea:	4a1b      	ldr	r2, [pc, #108]	; (8000358 <main+0x78>)
 80002ec:	f107 0308 	add.w	r3, r7, #8
 80002f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f4:	6018      	str	r0, [r3, #0]
 80002f6:	3304      	adds	r3, #4
 80002f8:	8019      	strh	r1, [r3, #0]
 80002fa:	3302      	adds	r3, #2
 80002fc:	0c0a      	lsrs	r2, r1, #16
 80002fe:	701a      	strb	r2, [r3, #0]
	uint8_t ch2[7]= {0};
 8000300:	463b      	mov	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	f8c3 2003 	str.w	r2, [r3, #3]

	EEPROM_Init();
 800030a:	f7ff ff31 	bl	8000170 <EEPROM_Init>
	EEPROM_Write_NBytes(0xAF, ch1, 7);
 800030e:	f107 0308 	add.w	r3, r7, #8
 8000312:	2207      	movs	r2, #7
 8000314:	4619      	mov	r1, r3
 8000316:	20af      	movs	r0, #175	; 0xaf
 8000318:	f7ff ff4a 	bl	80001b0 <EEPROM_Write_NBytes>
	EEPROM_Read_Byte(0xAF, ch2, 7);
 800031c:	463b      	mov	r3, r7
 800031e:	2207      	movs	r2, #7
 8000320:	4619      	mov	r1, r3
 8000322:	20af      	movs	r0, #175	; 0xaf
 8000324:	f7ff ff96 	bl	8000254 <EEPROM_Read_Byte>

	//Test case 2
	ch1[0] = 0xA;
 8000328:	230a      	movs	r3, #10
 800032a:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 800032c:	230b      	movs	r3, #11
 800032e:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 8000330:	230c      	movs	r3, #12
 8000332:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8000334:	230d      	movs	r3, #13
 8000336:	72fb      	strb	r3, [r7, #11]

	EEPROM_Write_NBytes(0xFFF, ch1, 4);
 8000338:	f107 0308 	add.w	r3, r7, #8
 800033c:	2204      	movs	r2, #4
 800033e:	4619      	mov	r1, r3
 8000340:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000344:	f7ff ff34 	bl	80001b0 <EEPROM_Write_NBytes>
	EEPROM_Read_Byte(0xFFF, ch2, 4);
 8000348:	463b      	mov	r3, r7
 800034a:	2204      	movs	r2, #4
 800034c:	4619      	mov	r1, r3
 800034e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000352:	f7ff ff7f 	bl	8000254 <EEPROM_Read_Byte>



	while(1)
 8000356:	e7fe      	b.n	8000356 <main+0x76>
 8000358:	080010a4 	.word	0x080010a4

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 fe5b 	bl	8001044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ffa7 	bl	80002e0 <main>

08000392 <LoopForever>:

LoopForever:
    b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	080010cc 	.word	0x080010cc
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	200000ac 	.word	0x200000ac

080003ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC1_2_IRQHandler>
	...

080003b0 <EXTI0_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*-
//ISR Functions
//-*-*-*-*-*-*-*-*-*-*-*

void EXTI0_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	//clear the pending bit
	EXTI->PR |= 1<<0;
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <EXTI0_IRQHandler+0x1c>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <EXTI0_IRQHandler+0x1c>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6153      	str	r3, [r2, #20]
	//callback function
	GP_IRQ_CallBack[0]();
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <EXTI0_IRQHandler+0x20>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4798      	blx	r3
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40010400 	.word	0x40010400
 80003d0:	20000070 	.word	0x20000070

080003d4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	//clear the pending bit
	EXTI->PR |= 1<<1;
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <EXTI1_IRQHandler+0x1c>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <EXTI1_IRQHandler+0x1c>)
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	6153      	str	r3, [r2, #20]
	//callback function
	GP_IRQ_CallBack[1]();
 80003e4:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <EXTI1_IRQHandler+0x20>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	4798      	blx	r3
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40010400 	.word	0x40010400
 80003f4:	20000070 	.word	0x20000070

080003f8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	//clear the pending bit
	EXTI->PR |= 1<<2;
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <EXTI2_IRQHandler+0x1c>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <EXTI2_IRQHandler+0x1c>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	6153      	str	r3, [r2, #20]
	//callback function
	GP_IRQ_CallBack[2]();
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <EXTI2_IRQHandler+0x20>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	4798      	blx	r3
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40010400 	.word	0x40010400
 8000418:	20000070 	.word	0x20000070

0800041c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	//clear the pending bit
	EXTI->PR |= 1<<3;
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <EXTI3_IRQHandler+0x1c>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <EXTI3_IRQHandler+0x1c>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6153      	str	r3, [r2, #20]
	//callback function
	GP_IRQ_CallBack[3]();
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <EXTI3_IRQHandler+0x20>)
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	4798      	blx	r3
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40010400 	.word	0x40010400
 800043c:	20000070 	.word	0x20000070

08000440 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	//clear the pending bit
	EXTI->PR |= 1<<4;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <EXTI4_IRQHandler+0x1c>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <EXTI4_IRQHandler+0x1c>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6153      	str	r3, [r2, #20]
	//callback function
	GP_IRQ_CallBack[4]();
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <EXTI4_IRQHandler+0x20>)
 8000452:	691b      	ldr	r3, [r3, #16]
 8000454:	4798      	blx	r3
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40010400 	.word	0x40010400
 8000460:	20000070 	.word	0x20000070

08000464 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5)
 8000468:	4b1f      	ldr	r3, [pc, #124]	; (80004e8 <EXTI9_5_IRQHandler+0x84>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	f003 0320 	and.w	r3, r3, #32
 8000470:	2b00      	cmp	r3, #0
 8000472:	d005      	beq.n	8000480 <EXTI9_5_IRQHandler+0x1c>
	{
		EXTI->PR = 1<<5;
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <EXTI9_5_IRQHandler+0x84>)
 8000476:	2220      	movs	r2, #32
 8000478:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[5]();
 800047a:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <EXTI9_5_IRQHandler+0x88>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<6)
 8000480:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <EXTI9_5_IRQHandler+0x84>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000488:	2b00      	cmp	r3, #0
 800048a:	d005      	beq.n	8000498 <EXTI9_5_IRQHandler+0x34>
	{
		EXTI->PR = 1<<6;
 800048c:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <EXTI9_5_IRQHandler+0x84>)
 800048e:	2240      	movs	r2, #64	; 0x40
 8000490:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[6]();
 8000492:	4b16      	ldr	r3, [pc, #88]	; (80004ec <EXTI9_5_IRQHandler+0x88>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<7)
 8000498:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <EXTI9_5_IRQHandler+0x84>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d005      	beq.n	80004b0 <EXTI9_5_IRQHandler+0x4c>
	{
		EXTI->PR = 1<<7;
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <EXTI9_5_IRQHandler+0x84>)
 80004a6:	2280      	movs	r2, #128	; 0x80
 80004a8:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[7]();
 80004aa:	4b10      	ldr	r3, [pc, #64]	; (80004ec <EXTI9_5_IRQHandler+0x88>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<8)
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <EXTI9_5_IRQHandler+0x84>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d006      	beq.n	80004ca <EXTI9_5_IRQHandler+0x66>
	{
		EXTI->PR = 1<<8;
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <EXTI9_5_IRQHandler+0x84>)
 80004be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004c2:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[8]();
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <EXTI9_5_IRQHandler+0x88>)
 80004c6:	6a1b      	ldr	r3, [r3, #32]
 80004c8:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<9)
 80004ca:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <EXTI9_5_IRQHandler+0x84>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d006      	beq.n	80004e4 <EXTI9_5_IRQHandler+0x80>
	{
		EXTI->PR = 1<<9;
 80004d6:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <EXTI9_5_IRQHandler+0x84>)
 80004d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004dc:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[9]();
 80004de:	4b03      	ldr	r3, [pc, #12]	; (80004ec <EXTI9_5_IRQHandler+0x88>)
 80004e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004e2:	4798      	blx	r3
	}

}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40010400 	.word	0x40010400
 80004ec:	20000070 	.word	0x20000070

080004f0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10)
 80004f4:	4b27      	ldr	r3, [pc, #156]	; (8000594 <EXTI15_10_IRQHandler+0xa4>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d006      	beq.n	800050e <EXTI15_10_IRQHandler+0x1e>
	{
		EXTI->PR = 1<<10;
 8000500:	4b24      	ldr	r3, [pc, #144]	; (8000594 <EXTI15_10_IRQHandler+0xa4>)
 8000502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000506:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[10]();
 8000508:	4b23      	ldr	r3, [pc, #140]	; (8000598 <EXTI15_10_IRQHandler+0xa8>)
 800050a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800050c:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<11)
 800050e:	4b21      	ldr	r3, [pc, #132]	; (8000594 <EXTI15_10_IRQHandler+0xa4>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000516:	2b00      	cmp	r3, #0
 8000518:	d006      	beq.n	8000528 <EXTI15_10_IRQHandler+0x38>
	{
		EXTI->PR = 1<<11;
 800051a:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <EXTI15_10_IRQHandler+0xa4>)
 800051c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000520:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[11]();
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <EXTI15_10_IRQHandler+0xa8>)
 8000524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000526:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<12)
 8000528:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <EXTI15_10_IRQHandler+0xa4>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000530:	2b00      	cmp	r3, #0
 8000532:	d006      	beq.n	8000542 <EXTI15_10_IRQHandler+0x52>
	{
		EXTI->PR = 1<<12;
 8000534:	4b17      	ldr	r3, [pc, #92]	; (8000594 <EXTI15_10_IRQHandler+0xa4>)
 8000536:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800053a:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[12]();
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <EXTI15_10_IRQHandler+0xa8>)
 800053e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000540:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<13)
 8000542:	4b14      	ldr	r3, [pc, #80]	; (8000594 <EXTI15_10_IRQHandler+0xa4>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800054a:	2b00      	cmp	r3, #0
 800054c:	d006      	beq.n	800055c <EXTI15_10_IRQHandler+0x6c>
	{
		EXTI->PR = 1<<13;
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <EXTI15_10_IRQHandler+0xa4>)
 8000550:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000554:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[13]();
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <EXTI15_10_IRQHandler+0xa8>)
 8000558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800055a:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<14)
 800055c:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <EXTI15_10_IRQHandler+0xa4>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000564:	2b00      	cmp	r3, #0
 8000566:	d006      	beq.n	8000576 <EXTI15_10_IRQHandler+0x86>
	{
		EXTI->PR = 1<<14;
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <EXTI15_10_IRQHandler+0xa4>)
 800056a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800056e:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[14]();
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <EXTI15_10_IRQHandler+0xa8>)
 8000572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000574:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<15)
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <EXTI15_10_IRQHandler+0xa4>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800057e:	2b00      	cmp	r3, #0
 8000580:	d006      	beq.n	8000590 <EXTI15_10_IRQHandler+0xa0>
	{
		EXTI->PR = 1<<15;
 8000582:	4b04      	ldr	r3, [pc, #16]	; (8000594 <EXTI15_10_IRQHandler+0xa4>)
 8000584:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000588:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[15]();
 800058a:	4b03      	ldr	r3, [pc, #12]	; (8000598 <EXTI15_10_IRQHandler+0xa8>)
 800058c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800058e:	4798      	blx	r3
	}

}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40010400 	.word	0x40010400
 8000598:	20000070 	.word	0x20000070

0800059c <MCAL_I2C_Init>:
//-------------------------------------------------
// GENERIC FUNCTIONS
//-------------------------------------------------

void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_Config_t* I2C_Config)
{
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
	uint16_t Temp_Register = 0, Freq_Range = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	82fb      	strh	r3, [r7, #22]
 80005aa:	2300      	movs	r3, #0
 80005ac:	82bb      	strh	r3, [r7, #20]
	uint32_t Pclk1 = 8000000;
 80005ae:	4b7c      	ldr	r3, [pc, #496]	; (80007a0 <MCAL_I2C_Init+0x204>)
 80005b0:	613b      	str	r3, [r7, #16]
	uint16_t Result = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	81fb      	strh	r3, [r7, #14]

	//1===============RCC clock enable==============
	if(I2Cx == I2C1)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a7a      	ldr	r2, [pc, #488]	; (80007a4 <MCAL_I2C_Init+0x208>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d110      	bne.n	80005e0 <MCAL_I2C_Init+0x44>
	{
		Global_I2C_Config[I2C1_Index] = *I2C_Config;
 80005be:	4a7a      	ldr	r2, [pc, #488]	; (80007a8 <MCAL_I2C_Init+0x20c>)
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	4614      	mov	r4, r2
 80005c4:	461d      	mov	r5, r3
 80005c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ce:	682b      	ldr	r3, [r5, #0]
 80005d0:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN();
 80005d2:	4b76      	ldr	r3, [pc, #472]	; (80007ac <MCAL_I2C_Init+0x210>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a75      	ldr	r2, [pc, #468]	; (80007ac <MCAL_I2C_Init+0x210>)
 80005d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	e014      	b.n	800060a <MCAL_I2C_Init+0x6e>
	}else if(I2Cx == I2C2)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a73      	ldr	r2, [pc, #460]	; (80007b0 <MCAL_I2C_Init+0x214>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d110      	bne.n	800060a <MCAL_I2C_Init+0x6e>
	{
		Global_I2C_Config[I2C2_Index] = *I2C_Config;
 80005e8:	4b6f      	ldr	r3, [pc, #444]	; (80007a8 <MCAL_I2C_Init+0x20c>)
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80005f0:	4615      	mov	r5, r2
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	682b      	ldr	r3, [r5, #0]
 80005fc:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN();
 80005fe:	4b6b      	ldr	r3, [pc, #428]	; (80007ac <MCAL_I2C_Init+0x210>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	4a6a      	ldr	r2, [pc, #424]	; (80007ac <MCAL_I2C_Init+0x210>)
 8000604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000608:	61d3      	str	r3, [r2, #28]
	}

	//2===============Set I2C Mode==============

	if(I2C_Config->I2C_Mode == I2C_Mode_I2C)
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d17f      	bne.n	8000712 <MCAL_I2C_Init+0x176>
		//-----------init timing-------------

		//I2C_CR2 -> Bits 5:0 FREQ[5:0]: Peripheral clock frequency

		/* 1. Get the I2Cx "CR2" Control register 2 Value */
		Temp_Register = I2Cx->CR2;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	82fb      	strh	r3, [r7, #22]

		/* 2. Clear frequency -> FREQ[5:0] bits */
		Temp_Register &= ~(I2C_CR2_FREQ_Msk);
 8000618:	8afb      	ldrh	r3, [r7, #22]
 800061a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800061e:	82fb      	strh	r3, [r7, #22]

		/* 3. Get Pclk1 frequency value */
		Pclk1 = MCAL_RCC_Get_PCLK1_FREQ();
 8000620:	f000 fba4 	bl	8000d6c <MCAL_RCC_Get_PCLK1_FREQ>
 8000624:	6138      	str	r0, [r7, #16]

		/* 4. Set frequency bits depending in Pclk1 value */
		Freq_Range = (uint16_t)(Pclk1 / 1000000);
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	4a62      	ldr	r2, [pc, #392]	; (80007b4 <MCAL_I2C_Init+0x218>)
 800062a:	fba2 2303 	umull	r2, r3, r2, r3
 800062e:	0c9b      	lsrs	r3, r3, #18
 8000630:	82bb      	strh	r3, [r7, #20]

		/* 5. Move the configuration in the temp register to set it in the CR2 register */
		Temp_Register |= Freq_Range;
 8000632:	8afa      	ldrh	r2, [r7, #22]
 8000634:	8abb      	ldrh	r3, [r7, #20]
 8000636:	4313      	orrs	r3, r2
 8000638:	82fb      	strh	r3, [r7, #22]

		/* 6. Set the "CR2" register with our new value */
		I2Cx->CR2 = Temp_Register;
 800063a:	8afa      	ldrh	r2, [r7, #22]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	605a      	str	r2, [r3, #4]

		//Configure "I2C_CCR" Clock control register

		/* 7. Disable the selected I2C peripheral to configure time */
		I2Cx->CR1 &= ~(I2C_CR1_PE);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f023 0201 	bic.w	r2, r3, #1
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	601a      	str	r2, [r3, #0]

		/* 8. Put the temp register with zero ready to put data on it */
		Temp_Register = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	82fb      	strh	r3, [r7, #22]

		/* 9. Configure the speed in the standard mode / Fast Mode */
		if((I2C_Config->I2C_ClockSpeed == I2C_CLOCK_SPEED_50KHZ) || (I2C_Config->I2C_ClockSpeed == I2C_CLOCK_SPEED_100KHZ))
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000658:	4293      	cmp	r3, r2
 800065a:	d004      	beq.n	8000666 <MCAL_I2C_Init+0xca>
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a55      	ldr	r2, [pc, #340]	; (80007b8 <MCAL_I2C_Init+0x21c>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d112      	bne.n	800068c <MCAL_I2C_Init+0xf0>
			/*
			 * Tclk / 2 = CCR * Tpclk1
			 * CCR = Tclk / (2 * Tpclk1)
			 * CCR = Fpclk / (2 * I2C_Clk_Frequency)
			 */
			Result = (uint16_t)(Pclk1 / (I2C_Config->I2C_ClockSpeed << 1));
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000672:	81fb      	strh	r3, [r7, #14]

			/* 12. Move the configuration in the temp register to set it in the I2C_CCR register */
			Temp_Register |= Result;
 8000674:	8afa      	ldrh	r2, [r7, #22]
 8000676:	89fb      	ldrh	r3, [r7, #14]
 8000678:	4313      	orrs	r3, r2
 800067a:	82fb      	strh	r3, [r7, #22]

			/* 13. Set the "I2C_CCR" register with our new value */
			I2Cx->CCR = Temp_Register;
 800067c:	8afa      	ldrh	r2, [r7, #22]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	61da      	str	r2, [r3, #28]
			/* 14. Set the "I2C_TRISE" register with "Frequency Range + 1" as data sheet
			 * For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			 * If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			 * therefore the TRISE[5:0] bits must be programmed with 09h.
			 * (1000 ns / 125 ns = 8 + 1)*/
			I2Cx->TRISE = Freq_Range + 1;
 8000682:	8abb      	ldrh	r3, [r7, #20]
 8000684:	3301      	adds	r3, #1
 8000686:	461a      	mov	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	621a      	str	r2, [r3, #32]
			//fast mode is not supported
		}

		//------------Configure "I2C_CR1" CTRL register-----------------
		/* 1. Get the I2C CR1 value */
		Temp_Register = I2Cx->CR1;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	82fb      	strh	r3, [r7, #22]

		/* 2. Set All configuration to the temp register  */
		Temp_Register |= (uint16_t)(I2C_Config->I2C_ACK_Control | I2C_Config->I2C_General_Call | I2C_Config->I2C_StretchMode | I2C_Config->I2C_Mode);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	b29a      	uxth	r2, r3
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	69db      	ldr	r3, [r3, #28]
 800069c:	b29b      	uxth	r3, r3
 800069e:	4313      	orrs	r3, r2
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	4313      	orrs	r3, r2
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	8afb      	ldrh	r3, [r7, #22]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	82fb      	strh	r3, [r7, #22]

		/* 3. Set the "I2C_CR1" register with our new value */
		I2Cx->CR1 = Temp_Register;
 80006bc:	8afa      	ldrh	r2, [r7, #22]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]

		//-------------Configure "I2C_OAR" Own address registers------------

		/* 1. Put the temp register with zero ready to put data on it */
		Temp_Register = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	82fb      	strh	r3, [r7, #22]

		/* 2. Check the Slave_Address type & Configure depends on it */
		if(I2C_Config->Slave_ADD.Enable_DUAL_ADD == 1)
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d10d      	bne.n	80006ea <MCAL_I2C_Init+0x14e>
		{
			/* 1. Enable the Dual addressing mode */
			Temp_Register = I2C_OAR2_ENDUAL;
 80006ce:	2301      	movs	r3, #1
 80006d0:	82fb      	strh	r3, [r7, #22]

			/* 2. Put the input Second address form the user to the register */
			/*
			 * Bits 7:1 ADD2[7:1]: Interface address
			 * bits 7:1 of address in dual addressing mode*/
			Temp_Register |= I2C_Config->Slave_ADD.Slave_Second_ADD << I2C_OAR2_ADD2_Pos;
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	7c5b      	ldrb	r3, [r3, #17]
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	b21a      	sxth	r2, r3
 80006da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80006de:	4313      	orrs	r3, r2
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	82fb      	strh	r3, [r7, #22]

			/* 3. Set the "I2C_OAR2" register with our new value */
			I2Cx->OAR2 = Temp_Register;
 80006e4:	8afa      	ldrh	r2, [r7, #22]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60da      	str	r2, [r3, #12]
		}

		/* 4. Put the temp register with zero ready to put data on it */
		Temp_Register = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	82fb      	strh	r3, [r7, #22]

		/* 5. Put the input First address form the user to the register */
		Temp_Register |= I2C_Config->Slave_ADD.Slave_First_ADD << 1;
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	7c1b      	ldrb	r3, [r3, #16]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	b21a      	sxth	r2, r3
 80006f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	b21b      	sxth	r3, r3
 80006fe:	82fb      	strh	r3, [r7, #22]

		/* 6. Configure ADDMODE Addressing mode (slave mode) */
		Temp_Register |= I2C_Config->Slave_ADD.Slave_ADD_Mode;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	b29a      	uxth	r2, r3
 8000706:	8afb      	ldrh	r3, [r7, #22]
 8000708:	4313      	orrs	r3, r2
 800070a:	82fb      	strh	r3, [r7, #22]

		/* 7. Set the "I2C_OAR1" register with our new value */
		I2Cx->OAR1 = Temp_Register;
 800070c:	8afa      	ldrh	r2, [r7, #22]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	609a      	str	r2, [r3, #8]
	{
		//SMBus not supported
	}

	//3===============interrupt Mode (Slave mode)==============
	if(I2C_Config->P_Slave_CallBack != NULL)
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	6a1b      	ldr	r3, [r3, #32]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d038      	beq.n	800078c <MCAL_I2C_Init+0x1f0>
	{
		/* 1. Enable IRQ */
		I2Cx->CR2 |= I2C_CR2_ITBUFEN;	//buffer interrupt enable
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= I2C_CR2_ITERREN;	//error interrupt enable
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= I2C_CR2_ITEVTEN; 	//event interrupt enable
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	605a      	str	r2, [r3, #4]

		/* 2. Enable IRQ in NVIC */
		if(I2Cx == I2C1)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MCAL_I2C_Init+0x208>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d10c      	bne.n	8000760 <MCAL_I2C_Init+0x1c4>
		{
			NVIC_IRQ31_I2C1_EV_Enable;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MCAL_I2C_Init+0x220>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <MCAL_I2C_Init+0x220>)
 800074c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000750:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable;
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MCAL_I2C_Init+0x224>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a1a      	ldr	r2, [pc, #104]	; (80007c0 <MCAL_I2C_Init+0x224>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6013      	str	r3, [r2, #0]
 800075e:	e00f      	b.n	8000780 <MCAL_I2C_Init+0x1e4>
		}else if(I2Cx == I2C2)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <MCAL_I2C_Init+0x214>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d10b      	bne.n	8000780 <MCAL_I2C_Init+0x1e4>
		{
			NVIC_IRQ33_I2C2_EV_Enable;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MCAL_I2C_Init+0x224>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <MCAL_I2C_Init+0x224>)
 800076e:	f043 0302 	orr.w	r3, r3, #2
 8000772:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_Enable;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MCAL_I2C_Init+0x224>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <MCAL_I2C_Init+0x224>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	6013      	str	r3, [r2, #0]
		}

		/* 3. Put the status registers with zero */
		I2Cx->SR1 = 0;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
	}

	//4===============Enable I2C peripheral==============
	I2Cx->CR1 |= I2C_CR1_PE;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f043 0201 	orr.w	r2, r3, #1
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	bf00      	nop
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bdb0      	pop	{r4, r5, r7, pc}
 80007a0:	007a1200 	.word	0x007a1200
 80007a4:	40005400 	.word	0x40005400
 80007a8:	2000001c 	.word	0x2000001c
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40005800 	.word	0x40005800
 80007b4:	431bde83 	.word	0x431bde83
 80007b8:	000186a0 	.word	0x000186a0
 80007bc:	e000e100 	.word	0xe000e100
 80007c0:	e000e104 	.word	0xe000e104

080007c4 <MCAL_I2C_GPIO_Set_Pins>:
		RCC_I2C2_RESET();
	}
}

void MCAL_I2C_GPIO_Set_Pins		(I2C_TypeDef* I2Cx)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;
	if(I2Cx == I2C1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a1f      	ldr	r2, [pc, #124]	; (800084c <MCAL_I2C_GPIO_Set_Pins+0x88>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d118      	bne.n	8000806 <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		//PB6: I2C1_SCL
		PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80007d4:	2340      	movs	r3, #64	; 0x40
 80007d6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD;
 80007d8:	2307      	movs	r3, #7
 80007da:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80007dc:	2301      	movs	r3, #1
 80007de:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4619      	mov	r1, r3
 80007e6:	481a      	ldr	r0, [pc, #104]	; (8000850 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80007e8:	f000 fbad 	bl	8000f46 <MCAL_GPIO_Init>

		//PB7: I2C1_SDA
		PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD;
 80007f0:	2307      	movs	r3, #7
 80007f2:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80007f4:	2301      	movs	r3, #1
 80007f6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	4619      	mov	r1, r3
 80007fe:	4814      	ldr	r0, [pc, #80]	; (8000850 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000800:	f000 fba1 	bl	8000f46 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD;
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &PinCfg);
	}
}
 8000804:	e01d      	b.n	8000842 <MCAL_I2C_GPIO_Set_Pins+0x7e>
	}else if(I2Cx == I2C2)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MCAL_I2C_GPIO_Set_Pins+0x90>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d119      	bne.n	8000842 <MCAL_I2C_GPIO_Set_Pins+0x7e>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800080e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000812:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD;
 8000814:	2307      	movs	r3, #7
 8000816:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000818:	2301      	movs	r3, #1
 800081a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	480b      	ldr	r0, [pc, #44]	; (8000850 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000824:	f000 fb8f 	bl	8000f46 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000828:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800082c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD;
 800082e:	2307      	movs	r3, #7
 8000830:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000832:	2301      	movs	r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4619      	mov	r1, r3
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 800083e:	f000 fb82 	bl	8000f46 <MCAL_GPIO_Init>
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40005400 	.word	0x40005400
 8000850:	40010c00 	.word	0x40010c00
 8000854:	40005800 	.word	0x40005800

08000858 <I2C_ACKConfig>:

void I2C_ACKConfig(I2C_TypeDef *I2Cx, Functional_State State)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	70fb      	strb	r3, [r7, #3]
    if (State == Enable)
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d106      	bne.n	8000878 <I2C_ACKConfig+0x20>
    {
        /* Enable Automatic ACK */
        I2Cx->CR1 |= (I2C_CR1_ACK);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	601a      	str	r2, [r3, #0]
    else
    {
        /* Disable Automatic ACK */
        I2Cx->CR1 &= ~(I2C_CR1_ACK);
    }
}
 8000876:	e005      	b.n	8000884 <I2C_ACKConfig+0x2c>
        I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
	...

08000890 <MCAL_I2C_Master_Rx>:

void MCAL_I2C_Master_Rx(I2C_TypeDef* I2Cx, uint16_t Dev_Add, uint8_t* pTxData, uint8_t Data_Len, STOP_Condition Stop, START_Condition Start)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	461a      	mov	r2, r3
 800089c:	460b      	mov	r3, r1
 800089e:	817b      	strh	r3, [r7, #10]
 80008a0:	4613      	mov	r3, r2
 80008a2:	727b      	strb	r3, [r7, #9]
	int i = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]

    uint8_t index = I2Cx == I2C1 ? I2C1_Index : I2C2_Index;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4a34      	ldr	r2, [pc, #208]	; (800097c <MCAL_I2C_Master_Rx+0xec>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	bf14      	ite	ne
 80008b0:	2301      	movne	r3, #1
 80008b2:	2300      	moveq	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	74fb      	strb	r3, [r7, #19]

	/* 1. Set the start bit in the I2C_CR1 register to generate a start condition from this will start as master */
	I2C_GenerateStart(I2Cx, Start, Enable);
 80008b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008bc:	2201      	movs	r2, #1
 80008be:	4619      	mov	r1, r3
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f000 f8b7 	bl	8000a34 <I2C_GenerateStart>

	/* 2. Wait for EV5 */
	/* EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address. */
	while(!(I2C_Get_FlagStatus(I2Cx, SB)));
 80008c6:	bf00      	nop
 80008c8:	2101      	movs	r1, #1
 80008ca:	68f8      	ldr	r0, [r7, #12]
 80008cc:	f000 f914 	bl	8000af8 <I2C_Get_FlagStatus>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d0f8      	beq.n	80008c8 <MCAL_I2C_Master_Rx+0x38>

	/* 3. Writing DR register with Address, Send Address */
	I2C_SendADD(I2Cx, Dev_Add, I2C_Direction_Receiver);
 80008d6:	897b      	ldrh	r3, [r7, #10]
 80008d8:	2201      	movs	r2, #1
 80008da:	4619      	mov	r1, r3
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f000 f8eb 	bl	8000ab8 <I2C_SendADD>

	/* 4. Wait for EV6 */
	/* EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2. */
	while(! I2C_Get_FlagStatus(I2Cx, ADDR));
 80008e2:	bf00      	nop
 80008e4:	2102      	movs	r1, #2
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f000 f906 	bl	8000af8 <I2C_Get_FlagStatus>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f8      	beq.n	80008e4 <MCAL_I2C_Master_Rx+0x54>

    /* 5. Enable Automatic ACK */
    /* To get ready to send ACK */
	I2C_ACKConfig(I2Cx,Enable);
 80008f2:	2101      	movs	r1, #1
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff ffaf 	bl	8000858 <I2C_ACKConfig>

	/* 6. Check if there is Data length available */
	if(Data_Len)
 80008fa:	7a7b      	ldrb	r3, [r7, #9]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d018      	beq.n	8000932 <MCAL_I2C_Master_Rx+0xa2>
	{
		for(i = Data_Len ; i > 1 ; i--)
 8000900:	7a7b      	ldrb	r3, [r7, #9]
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	e012      	b.n	800092c <MCAL_I2C_Master_Rx+0x9c>
		{
            /* 8. Wait for EV7 */
            /* EV7: RxNE=1 cleared by reading DR register */
			while(!I2C_Get_FlagStatus(I2Cx, RXNE));
 8000906:	bf00      	nop
 8000908:	2104      	movs	r1, #4
 800090a:	68f8      	ldr	r0, [r7, #12]
 800090c:	f000 f8f4 	bl	8000af8 <I2C_Get_FlagStatus>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0f8      	beq.n	8000908 <MCAL_I2C_Master_Rx+0x78>

			/* 9. Read the data in the DR register */
			*pTxData = I2Cx->DR;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	701a      	strb	r2, [r3, #0]

			/* 10. Go to next address */
			pTxData++;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
		for(i = Data_Len ; i > 1 ; i--)
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	3b01      	subs	r3, #1
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	2b01      	cmp	r3, #1
 8000930:	dce9      	bgt.n	8000906 <MCAL_I2C_Master_Rx+0x76>
    /* To generate the non-acknowledge pulse after the last received data byte, the ACK bit
        must be cleared just after reading the second last data byte (after second last RxNE
        event).
     */
    /* Send ---- > NACK */
	I2C_ACKConfig(I2Cx,Disable);
 8000932:	2100      	movs	r1, #0
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f7ff ff8f 	bl	8000858 <I2C_ACKConfig>

    /* 9. Send Stop Condition */
    if (Stop == With_Stop)
 800093a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d103      	bne.n	800094a <MCAL_I2C_Master_Rx+0xba>
    {
        I2C_GenerateStop(I2Cx, Enable);
 8000942:	2101      	movs	r1, #1
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f000 f89c 	bl	8000a82 <I2C_GenerateStop>
    }

    if(Global_I2C_Config[index].I2C_ACK_Control == I2C_ACK_Control_Enable)
 800094a:	7cfa      	ldrb	r2, [r7, #19]
 800094c:	490c      	ldr	r1, [pc, #48]	; (8000980 <MCAL_I2C_Master_Rx+0xf0>)
 800094e:	4613      	mov	r3, r2
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	4413      	add	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	440b      	add	r3, r1
 8000958:	3318      	adds	r3, #24
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000960:	d104      	bne.n	800096c <MCAL_I2C_Master_Rx+0xdc>
    	I2C_ACKConfig(I2Cx, Enable);
 8000962:	2101      	movs	r1, #1
 8000964:	68f8      	ldr	r0, [r7, #12]
 8000966:	f7ff ff77 	bl	8000858 <I2C_ACKConfig>
    else
    	I2C_ACKConfig(I2Cx, Disable);
}
 800096a:	e003      	b.n	8000974 <MCAL_I2C_Master_Rx+0xe4>
    	I2C_ACKConfig(I2Cx, Disable);
 800096c:	2100      	movs	r1, #0
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f7ff ff72 	bl	8000858 <I2C_ACKConfig>
}
 8000974:	bf00      	nop
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40005400 	.word	0x40005400
 8000980:	2000001c 	.word	0x2000001c

08000984 <MCAL_I2C_Master_Tx>:


void MCAL_I2C_Master_Tx(I2C_TypeDef* I2Cx, uint16_t Dev_Add, uint8_t* pTxData, uint8_t Data_Len, STOP_Condition Stop, START_Condition Start)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	461a      	mov	r2, r3
 8000990:	460b      	mov	r3, r1
 8000992:	817b      	strh	r3, [r7, #10]
 8000994:	4613      	mov	r3, r2
 8000996:	727b      	strb	r3, [r7, #9]
	int i = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
	/* 1. Set the start bit in the I2C_CR1 register to generate a start condition from this will start as master */
	I2C_GenerateStart(I2Cx, Start, Enable);
 800099c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009a0:	2201      	movs	r2, #1
 80009a2:	4619      	mov	r1, r3
 80009a4:	68f8      	ldr	r0, [r7, #12]
 80009a6:	f000 f845 	bl	8000a34 <I2C_GenerateStart>

	/* 2. Wait for EV5 */
	/* EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address. */
	while(!(I2C_Get_FlagStatus(I2Cx, SB)));
 80009aa:	bf00      	nop
 80009ac:	2101      	movs	r1, #1
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f000 f8a2 	bl	8000af8 <I2C_Get_FlagStatus>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f8      	beq.n	80009ac <MCAL_I2C_Master_Tx+0x28>

	/* 3. Writing DR register with Address, Send Address */
	I2C_SendADD(I2Cx, Dev_Add, I2C_Direction_Transmitter);
 80009ba:	897b      	ldrh	r3, [r7, #10]
 80009bc:	2200      	movs	r2, #0
 80009be:	4619      	mov	r1, r3
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f000 f879 	bl	8000ab8 <I2C_SendADD>

	/* 4. Wait for EV6 */
	/* EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2. */
	while(! I2C_Get_FlagStatus(I2Cx, ADDR));
 80009c6:	bf00      	nop
 80009c8:	2102      	movs	r1, #2
 80009ca:	68f8      	ldr	r0, [r7, #12]
 80009cc:	f000 f894 	bl	8000af8 <I2C_Get_FlagStatus>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0f8      	beq.n	80009c8 <MCAL_I2C_Master_Tx+0x44>

	/* 5. Wait for EV8_1 */
	/* EV8_1: TxE=1, shift register empty, data register empty, write Data1 in DR. */
	/* Check for TRA: Transmitter/receiver, BUSY: Bus busy, MSL: Master/slave, TxE Flags */
	while(!I2C_Get_FlagStatus(I2Cx, Master_Transmitter_Event));
 80009d6:	bf00      	nop
 80009d8:	4915      	ldr	r1, [pc, #84]	; (8000a30 <MCAL_I2C_Master_Tx+0xac>)
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f000 f88c 	bl	8000af8 <I2C_Get_FlagStatus>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d0f8      	beq.n	80009d8 <MCAL_I2C_Master_Tx+0x54>

	/* Loop inside the data ready to send it */
	for(i=0; i<Data_Len ; ++i)
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	e011      	b.n	8000a10 <MCAL_I2C_Master_Tx+0x8c>
	{
		/* 6. Write in the DR register the data to be sent */
		I2Cx->DR = pTxData[i];
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	611a      	str	r2, [r3, #16]

		/* 7. Wait for EV8 */
		/* EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register. */
		while(! I2C_Get_FlagStatus(I2Cx, TXE));
 80009fa:	bf00      	nop
 80009fc:	2103      	movs	r1, #3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f87a 	bl	8000af8 <I2C_Get_FlagStatus>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0f8      	beq.n	80009fc <MCAL_I2C_Master_Tx+0x78>
	for(i=0; i<Data_Len ; ++i)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	7a7b      	ldrb	r3, [r7, #9]
 8000a12:	697a      	ldr	r2, [r7, #20]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dbe9      	blt.n	80009ec <MCAL_I2C_Master_Tx+0x68>

		/* 8. Wait for EV8 */
		/* EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition. */
	}
	 /* 9. Send Stop Condition */
	if(Stop == With_Stop)
 8000a18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d103      	bne.n	8000a28 <MCAL_I2C_Master_Tx+0xa4>
	{
		I2C_GenerateStop(I2Cx, Enable);
 8000a20:	2101      	movs	r1, #1
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f000 f82d 	bl	8000a82 <I2C_GenerateStop>
	}

}
 8000a28:	bf00      	nop
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	00070080 	.word	0x00070080

08000a34 <I2C_GenerateStart>:

void I2C_GenerateStart(I2C_TypeDef *I2Cx,START_Condition Start, Functional_State State)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
 8000a40:	4613      	mov	r3, r2
 8000a42:	70bb      	strb	r3, [r7, #2]
	/* Check the type of start (Start or Repeated Start) */
	if(Start != Repeated_START)
 8000a44:	78fb      	ldrb	r3, [r7, #3]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d007      	beq.n	8000a5a <I2C_GenerateStart+0x26>
		while(I2C_Get_FlagStatus(I2Cx, BUS_BUSY));
 8000a4a:	bf00      	nop
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 f852 	bl	8000af8 <I2C_Get_FlagStatus>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1f8      	bne.n	8000a4c <I2C_GenerateStart+0x18>
        0: No Start generation
        1: Repeated start generation
        In Slave mode:
        0: No Start generation
        1: Start generation when the bus is free*/
	if(State != Disable)
 8000a5a:	78bb      	ldrb	r3, [r7, #2]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <I2C_GenerateStart+0x3a>
		I2Cx->CR1 |= I2C_CR1_START;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	601a      	str	r2, [r3, #0]
	else
		I2Cx->CR1 &= ~(I2C_CR1_START);
}
 8000a6c:	e005      	b.n	8000a7a <I2C_GenerateStart+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	601a      	str	r2, [r3, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <I2C_GenerateStop>:

void I2C_GenerateStop(I2C_TypeDef* I2Cx, Functional_State State)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	70fb      	strb	r3, [r7, #3]
	if(State != Disable)
 8000a8e:	78fb      	ldrb	r3, [r7, #3]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d006      	beq.n	8000aa2 <I2C_GenerateStop+0x20>
		I2Cx->CR1 |= I2C_CR1_STOP;		//generate a stop condition
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	601a      	str	r2, [r3, #0]
	else
		I2Cx->CR1 &= ~(I2C_CR1_STOP);	//disable a stop condition generation
}
 8000aa0:	e005      	b.n	8000aae <I2C_GenerateStop+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);	//disable a stop condition generation
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	601a      	str	r2, [r3, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <I2C_SendADD>:


//suports only 7 bit mode
void I2C_SendADD(I2C_TypeDef* I2Cx, uint16_t ADD, I2C_Direction Direction)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	807b      	strh	r3, [r7, #2]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	707b      	strb	r3, [r7, #1]
	if(Direction == I2C_Direction_Receiver)
 8000ac8:	787b      	ldrb	r3, [r7, #1]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d107      	bne.n	8000ade <I2C_SendADD+0x26>
		I2Cx->DR = ((ADD << 1) | (0x01));
 8000ace:	887b      	ldrh	r3, [r7, #2]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	611a      	str	r2, [r3, #16]
	else if(Direction == I2C_Direction_Transmitter)
		 I2Cx->DR = (ADD << 1);


}
 8000adc:	e007      	b.n	8000aee <I2C_SendADD+0x36>
	else if(Direction == I2C_Direction_Transmitter)
 8000ade:	787b      	ldrb	r3, [r7, #1]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d104      	bne.n	8000aee <I2C_SendADD+0x36>
		 I2Cx->DR = (ADD << 1);
 8000ae4:	887b      	ldrh	r3, [r7, #2]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	461a      	mov	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	611a      	str	r2, [r3, #16]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <I2C_Get_FlagStatus>:

I2C_Flagstatus I2C_Get_FlagStatus(I2C_TypeDef *I2Cx, Status Flag)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
	//volatile uint32_t dummyRead;
	I2C_Flagstatus Bit_Status = RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	75fb      	strb	r3, [r7, #23]
	uint32_t flag1 = 0 , flag2 = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
	uint32_t lastevent = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]

	switch(Flag)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d026      	beq.n	8000b66 <I2C_Get_FlagStatus+0x6e>
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d804      	bhi.n	8000b26 <I2C_Get_FlagStatus+0x2e>
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d00a      	beq.n	8000b36 <I2C_Get_FlagStatus+0x3e>
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d014      	beq.n	8000b4e <I2C_Get_FlagStatus+0x56>
		else
			Bit_Status = RESET;
		break;
	}
	default:
		break;
 8000b24:	e05a      	b.n	8000bdc <I2C_Get_FlagStatus+0xe4>
	switch(Flag)
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	d04c      	beq.n	8000bc4 <I2C_Get_FlagStatus+0xcc>
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d33e      	bcc.n	8000bac <I2C_Get_FlagStatus+0xb4>
 8000b2e:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <I2C_Get_FlagStatus+0xf0>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d022      	beq.n	8000b7a <I2C_Get_FlagStatus+0x82>
		break;
 8000b34:	e052      	b.n	8000bdc <I2C_Get_FlagStatus+0xe4>
		if((I2Cx->SR2) & (I2C_SR2_BUSY))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <I2C_Get_FlagStatus+0x50>
			Bit_Status = SET;
 8000b42:	2301      	movs	r3, #1
 8000b44:	75fb      	strb	r3, [r7, #23]
		break;
 8000b46:	e049      	b.n	8000bdc <I2C_Get_FlagStatus+0xe4>
			Bit_Status = RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	75fb      	strb	r3, [r7, #23]
		break;
 8000b4c:	e046      	b.n	8000bdc <I2C_Get_FlagStatus+0xe4>
		if((I2Cx->SR1) & (I2C_SR1_SB))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <I2C_Get_FlagStatus+0x68>
			Bit_Status = SET;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	75fb      	strb	r3, [r7, #23]
		break;
 8000b5e:	e03d      	b.n	8000bdc <I2C_Get_FlagStatus+0xe4>
			Bit_Status = RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	75fb      	strb	r3, [r7, #23]
		break;
 8000b64:	e03a      	b.n	8000bdc <I2C_Get_FlagStatus+0xe4>
		if(I2Cx->SR1 == I2C_SR1_ADDR)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d102      	bne.n	8000b74 <I2C_Get_FlagStatus+0x7c>
			Bit_Status = SET;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	75fb      	strb	r3, [r7, #23]
		break;
 8000b72:	e033      	b.n	8000bdc <I2C_Get_FlagStatus+0xe4>
			Bit_Status = RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	75fb      	strb	r3, [r7, #23]
		break;
 8000b78:	e030      	b.n	8000bdc <I2C_Get_FlagStatus+0xe4>
		flag1 = Master_Transmitter_Event & (0x0000FFFF);
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	613b      	str	r3, [r7, #16]
		flag2 = Master_Transmitter_Event >> 16;
 8000b7e:	2307      	movs	r3, #7
 8000b80:	60fb      	str	r3, [r7, #12]
		lastevent = ((I2Cx->SR1 & flag1) | ((I2Cx->SR2 & flag2) << 16));
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	695a      	ldr	r2, [r3, #20]
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	401a      	ands	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6999      	ldr	r1, [r3, #24]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	400b      	ands	r3, r1
 8000b92:	041b      	lsls	r3, r3, #16
 8000b94:	4313      	orrs	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
		if(lastevent == Flag)
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d102      	bne.n	8000ba6 <I2C_Get_FlagStatus+0xae>
			Bit_Status = SET;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	75fb      	strb	r3, [r7, #23]
		break;
 8000ba4:	e01a      	b.n	8000bdc <I2C_Get_FlagStatus+0xe4>
			Bit_Status = RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	75fb      	strb	r3, [r7, #23]
		break;
 8000baa:	e017      	b.n	8000bdc <I2C_Get_FlagStatus+0xe4>
		if((I2Cx->SR1) & (I2C_SR1_TXE))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <I2C_Get_FlagStatus+0xc6>
			Bit_Status = SET;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	75fb      	strb	r3, [r7, #23]
		break;
 8000bbc:	e00e      	b.n	8000bdc <I2C_Get_FlagStatus+0xe4>
			Bit_Status = RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	75fb      	strb	r3, [r7, #23]
		break;
 8000bc2:	e00b      	b.n	8000bdc <I2C_Get_FlagStatus+0xe4>
		if((I2Cx->SR1)&(I2C_SR1_RXNE))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d002      	beq.n	8000bd6 <I2C_Get_FlagStatus+0xde>
			Bit_Status = SET;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	75fb      	strb	r3, [r7, #23]
		break;
 8000bd4:	e001      	b.n	8000bda <I2C_Get_FlagStatus+0xe2>
			Bit_Status = RESET;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	75fb      	strb	r3, [r7, #23]
		break;
 8000bda:	bf00      	nop
	}
	return Bit_Status;
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	371c      	adds	r7, #28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	00070080 	.word	0x00070080

08000bec <I2C1_EV_IRQHandler>:
//----------------------------------------------
//ISR
//---------------------------------------------

void I2C1_EV_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
    // vuint32_t Dummy_Read = 0; // Volatile for compiler optimization

    /* Interrupt handling for both master and slave mode of the device */
    uint32_t Temp_1, Temp_2, Temp_3;

    Temp_1 = (I2C1->CR2 & (I2C_CR2_ITEVTEN)); // Event interrupt enable
 8000bf2:	4b39      	ldr	r3, [pc, #228]	; (8000cd8 <I2C1_EV_IRQHandler+0xec>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bfa:	60fb      	str	r3, [r7, #12]
    Temp_2 = (I2C1->CR2 & (I2C_CR2_ITBUFEN)); // Buffer interrupt enable
 8000bfc:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <I2C1_EV_IRQHandler+0xec>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c04:	60bb      	str	r3, [r7, #8]
    Temp_3 = (I2C1->SR1 & (I2C_SR1_STOPF));   // Stop detection (slave mode)
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <I2C1_EV_IRQHandler+0xec>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f003 0310 	and.w	r3, r3, #16
 8000c0e:	607b      	str	r3, [r7, #4]

    /* Handle Stop Condition Event */
    if (Temp_1 && Temp_3)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d00a      	beq.n	8000c2c <I2C1_EV_IRQHandler+0x40>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d007      	beq.n	8000c2c <I2C1_EV_IRQHandler+0x40>
    {
        /* STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
         * i have already read SR1 in Temp_3
         * then next statement i write to CR1
         */
        I2C1->CR1 |= 0x0000;
 8000c1c:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <I2C1_EV_IRQHandler+0xec>)
 8000c1e:	4a2e      	ldr	r2, [pc, #184]	; (8000cd8 <I2C1_EV_IRQHandler+0xec>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6013      	str	r3, [r2, #0]
        Global_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_STOP);
 8000c24:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <I2C1_EV_IRQHandler+0xf0>)
 8000c26:	6a1b      	ldr	r3, [r3, #32]
 8000c28:	2000      	movs	r0, #0
 8000c2a:	4798      	blx	r3
    }

    /* =============================================================================== */

    /* Handle Received address matched. */
    Temp_3 = (I2C1->SR1 & (I2C_SR1_ADDR)); // ADDR
 8000c2c:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <I2C1_EV_IRQHandler+0xec>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	607b      	str	r3, [r7, #4]
    if (Temp_1 && Temp_3)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d00c      	beq.n	8000c56 <I2C1_EV_IRQHandler+0x6a>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d009      	beq.n	8000c56 <I2C1_EV_IRQHandler+0x6a>
         */
        // Dummy_Read  = I2C1->SR1;
        // Dummy_Read  = I2C1->SR2;

        /* Check master mode or slave mode */
        if (I2C1->SR2 & (I2C_SR2_MSL))
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <I2C1_EV_IRQHandler+0xec>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d103      	bne.n	8000c56 <I2C1_EV_IRQHandler+0x6a>
            /* Master mode (Using polling mechanism not interrupt) */
        }
        else
        {
            /* Slave mode */
            Global_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_ADD_MATCHED);
 8000c4e:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <I2C1_EV_IRQHandler+0xf0>)
 8000c50:	6a1b      	ldr	r3, [r3, #32]
 8000c52:	2002      	movs	r0, #2
 8000c54:	4798      	blx	r3
    }

    /* =============================================================================== */

    /* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
    Temp_3 = (I2C1->SR1 & (I2C_SR1_TXE)); // TXE
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <I2C1_EV_IRQHandler+0xec>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5e:	607b      	str	r3, [r7, #4]
    if (Temp_1 && Temp_2 && Temp_3)       // In case TXE=1, ITEVTEN=1, ITBUFEN=1
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d015      	beq.n	8000c92 <I2C1_EV_IRQHandler+0xa6>
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d012      	beq.n	8000c92 <I2C1_EV_IRQHandler+0xa6>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00f      	beq.n	8000c92 <I2C1_EV_IRQHandler+0xa6>
    {
        /* Check master mode or slave mode */
        if (I2C1->SR2 & (I2C_SR2_MSL))
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <I2C1_EV_IRQHandler+0xec>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d109      	bne.n	8000c92 <I2C1_EV_IRQHandler+0xa6>
        }
        else
        {
            /* Slave mode */
            /* Check if slave in transmit mode */
            if (I2C1->SR2 & (I2C_SR2_TRA)) // TRA: Transmitter/receiver: 1: Data bytes transmitted
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <I2C1_EV_IRQHandler+0xec>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <I2C1_EV_IRQHandler+0xa6>
            {
                Global_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_DATA_REQ);
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <I2C1_EV_IRQHandler+0xf0>)
 8000c8c:	6a1b      	ldr	r3, [r3, #32]
 8000c8e:	2003      	movs	r0, #3
 8000c90:	4798      	blx	r3
    }

    /* =============================================================================== */

    /* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
    Temp_3 = (I2C1->SR1 & (I2C_SR1_RXNE)); // RXNE
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <I2C1_EV_IRQHandler+0xec>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9a:	607b      	str	r3, [r7, #4]
    if (Temp_1 && Temp_2 && Temp_3)        // In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d015      	beq.n	8000cce <I2C1_EV_IRQHandler+0xe2>
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d012      	beq.n	8000cce <I2C1_EV_IRQHandler+0xe2>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00f      	beq.n	8000cce <I2C1_EV_IRQHandler+0xe2>
    {
        /* Check master mode or slave mode */
        if (I2C1->SR2 & (I2C_SR2_MSL))
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <I2C1_EV_IRQHandler+0xec>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d109      	bne.n	8000cce <I2C1_EV_IRQHandler+0xe2>
            /* Master mode (Using polling mechanism not interrupt) */
        }
        else
        {
            /* Slave mode */
            if (!(I2C1->SR2 & (I2C_SR2_TRA))) // TRA: Transmitter/receiver: 0: Data bytes received
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <I2C1_EV_IRQHandler+0xec>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d103      	bne.n	8000cce <I2C1_EV_IRQHandler+0xe2>
            {
                Global_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_DATA_RCV);
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <I2C1_EV_IRQHandler+0xf0>)
 8000cc8:	6a1b      	ldr	r3, [r3, #32]
 8000cca:	2004      	movs	r0, #4
 8000ccc:	4798      	blx	r3
            }
        }
    }
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	2000001c 	.word	0x2000001c

08000ce0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <MCAL_RCC_Get_SYSCLK_FREQ>:
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHB_Prescalar[16u] = {0,0,0,0,0,0,0,1,2,3,4,6,7,8};

uint32_t MCAL_RCC_Get_SYSCLK_FREQ(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: not applicable*/

	switch ((RCC->CFGR >> 2 ) & 0b11)
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MCAL_RCC_Get_SYSCLK_FREQ+0x34>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d006      	beq.n	8000d24 <MCAL_RCC_Get_SYSCLK_FREQ+0x20>
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d302      	bcc.n	8000d20 <MCAL_RCC_Get_SYSCLK_FREQ+0x1c>
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d004      	beq.n	8000d28 <MCAL_RCC_Get_SYSCLK_FREQ+0x24>
 8000d1e:	e005      	b.n	8000d2c <MCAL_RCC_Get_SYSCLK_FREQ+0x28>
	{
		case 0:
			return HSI_CLK;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MCAL_RCC_Get_SYSCLK_FREQ+0x38>)
 8000d22:	e004      	b.n	8000d2e <MCAL_RCC_Get_SYSCLK_FREQ+0x2a>
			break;
		case 1:
			return HSE_CLK;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MCAL_RCC_Get_SYSCLK_FREQ+0x3c>)
 8000d26:	e002      	b.n	8000d2e <MCAL_RCC_Get_SYSCLK_FREQ+0x2a>
			break;
		case 2:
			return 16000000;
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <MCAL_RCC_Get_SYSCLK_FREQ+0x3c>)
 8000d2a:	e000      	b.n	8000d2e <MCAL_RCC_Get_SYSCLK_FREQ+0x2a>

			break;

		default:
			return 0;
 8000d2c:	2300      	movs	r3, #0
			break;

		}
		return 0;
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	007a1200 	.word	0x007a1200
 8000d40:	00f42400 	.word	0x00f42400

08000d44 <MCAL_RCC_Get_HCLK_FREQ>:

uint32_t MCAL_RCC_Get_HCLK_FREQ(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	return MCAL_RCC_Get_SYSCLK_FREQ() >> AHB_Prescalar[(RCC->CFGR >> 4) & 0b1111];
 8000d48:	f7ff ffdc 	bl	8000d04 <MCAL_RCC_Get_SYSCLK_FREQ>
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <MCAL_RCC_Get_HCLK_FREQ+0x20>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	091b      	lsrs	r3, r3, #4
 8000d54:	f003 030f 	and.w	r3, r3, #15
 8000d58:	4a03      	ldr	r2, [pc, #12]	; (8000d68 <MCAL_RCC_Get_HCLK_FREQ+0x24>)
 8000d5a:	5cd3      	ldrb	r3, [r2, r3]
 8000d5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40021000 	.word	0x40021000
 8000d68:	080010b4 	.word	0x080010b4

08000d6c <MCAL_RCC_Get_PCLK1_FREQ>:

uint32_t MCAL_RCC_Get_PCLK1_FREQ(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	return MCAL_RCC_Get_HCLK_FREQ()	>> APB_Prescalar[(RCC->CFGR >> 8) & 0b111];
 8000d70:	f7ff ffe8 	bl	8000d44 <MCAL_RCC_Get_HCLK_FREQ>
 8000d74:	4601      	mov	r1, r0
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <MCAL_RCC_Get_PCLK1_FREQ+0x20>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	0a1b      	lsrs	r3, r3, #8
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <MCAL_RCC_Get_PCLK1_FREQ+0x24>)
 8000d82:	5cd3      	ldrb	r3, [r2, r3]
 8000d84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	080010ac 	.word	0x080010ac

08000d94 <SPI1_IRQHandler>:
//----------------------------------------------
//ISR
//---------------------------------------------

void SPI1_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
	S_IRQ_SRC irq_src;
	irq_src.TXE =  (SPI1->SPI_SR & (1<<1) >> 1 );
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <SPI1_IRQHandler+0x50>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	793b      	ldrb	r3, [r7, #4]
 8000da6:	f362 0300 	bfi	r3, r2, #0, #1
 8000daa:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE =  (SPI1->SPI_SR & (1<<0) >> 0 );
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <SPI1_IRQHandler+0x50>)
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	793b      	ldrb	r3, [r7, #4]
 8000db8:	f362 0341 	bfi	r3, r2, #1, #1
 8000dbc:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI =  (SPI1->SPI_SR & (1<<4) >> 4 );
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <SPI1_IRQHandler+0x50>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	793b      	ldrb	r3, [r7, #4]
 8000dca:	f362 0382 	bfi	r3, r2, #2, #1
 8000dce:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <SPI1_IRQHandler+0x54>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	7938      	ldrb	r0, [r7, #4]
 8000dd8:	4798      	blx	r3
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40013000 	.word	0x40013000
 8000de8:	20000064 	.word	0x20000064

08000dec <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
	S_IRQ_SRC irq_src;
	irq_src.TXE = (SPI2->SPI_SR & (1<<1) >> 1 );
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <SPI2_IRQHandler+0x50>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	793b      	ldrb	r3, [r7, #4]
 8000dfe:	f362 0300 	bfi	r3, r2, #0, #1
 8000e02:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = (SPI2->SPI_SR & (1<<0) >> 0 );
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <SPI2_IRQHandler+0x50>)
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	793b      	ldrb	r3, [r7, #4]
 8000e10:	f362 0341 	bfi	r3, r2, #1, #1
 8000e14:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = (SPI2->SPI_SR & (1<<4) >> 4 );
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <SPI2_IRQHandler+0x50>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	793b      	ldrb	r3, [r7, #4]
 8000e22:	f362 0382 	bfi	r3, r2, #2, #1
 8000e26:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SPI2_IRQHandler+0x54>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	7938      	ldrb	r0, [r7, #4]
 8000e30:	4798      	blx	r3
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40003800 	.word	0x40003800
 8000e40:	20000064 	.word	0x20000064

08000e44 <USART1_IRQHandler>:
}


//ISR
void USART1_IRQHandler (void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000e48:	4b02      	ldr	r3, [pc, #8]	; (8000e54 <USART1_IRQHandler+0x10>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	4798      	blx	r3
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000006c 	.word	0x2000006c

08000e58 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <USART2_IRQHandler+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	4798      	blx	r3
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000006c 	.word	0x2000006c

08000e6c <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <USART3_IRQHandler+0x10>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	691b      	ldr	r3, [r3, #16]
 8000e76:	4798      	blx	r3
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2000006c 	.word	0x2000006c

08000e80 <Get_CRLH_POSITION>:
 */

#include <Stm32_F103C6_gpio_driver.h>

uint8_t Get_CRLH_POSITION(uint16_t PinNumber)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	2b80      	cmp	r3, #128	; 0x80
 8000e8e:	d042      	beq.n	8000f16 <Get_CRLH_POSITION+0x96>
 8000e90:	2b80      	cmp	r3, #128	; 0x80
 8000e92:	dc11      	bgt.n	8000eb8 <Get_CRLH_POSITION+0x38>
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d036      	beq.n	8000f06 <Get_CRLH_POSITION+0x86>
 8000e98:	2b08      	cmp	r3, #8
 8000e9a:	dc06      	bgt.n	8000eaa <Get_CRLH_POSITION+0x2a>
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d02e      	beq.n	8000efe <Get_CRLH_POSITION+0x7e>
 8000ea0:	2b04      	cmp	r3, #4
 8000ea2:	d02e      	beq.n	8000f02 <Get_CRLH_POSITION+0x82>
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d028      	beq.n	8000efa <Get_CRLH_POSITION+0x7a>
 8000ea8:	e047      	b.n	8000f3a <Get_CRLH_POSITION+0xba>
 8000eaa:	2b20      	cmp	r3, #32
 8000eac:	d02f      	beq.n	8000f0e <Get_CRLH_POSITION+0x8e>
 8000eae:	2b40      	cmp	r3, #64	; 0x40
 8000eb0:	d02f      	beq.n	8000f12 <Get_CRLH_POSITION+0x92>
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d029      	beq.n	8000f0a <Get_CRLH_POSITION+0x8a>
 8000eb6:	e040      	b.n	8000f3a <Get_CRLH_POSITION+0xba>
 8000eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ebc:	d033      	beq.n	8000f26 <Get_CRLH_POSITION+0xa6>
 8000ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ec2:	dc09      	bgt.n	8000ed8 <Get_CRLH_POSITION+0x58>
 8000ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ec8:	d029      	beq.n	8000f1e <Get_CRLH_POSITION+0x9e>
 8000eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ece:	d028      	beq.n	8000f22 <Get_CRLH_POSITION+0xa2>
 8000ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ed4:	d021      	beq.n	8000f1a <Get_CRLH_POSITION+0x9a>
 8000ed6:	e030      	b.n	8000f3a <Get_CRLH_POSITION+0xba>
 8000ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000edc:	d027      	beq.n	8000f2e <Get_CRLH_POSITION+0xae>
 8000ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ee2:	dc03      	bgt.n	8000eec <Get_CRLH_POSITION+0x6c>
 8000ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ee8:	d01f      	beq.n	8000f2a <Get_CRLH_POSITION+0xaa>
 8000eea:	e026      	b.n	8000f3a <Get_CRLH_POSITION+0xba>
 8000eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ef0:	d01f      	beq.n	8000f32 <Get_CRLH_POSITION+0xb2>
 8000ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ef6:	d01e      	beq.n	8000f36 <Get_CRLH_POSITION+0xb6>
 8000ef8:	e01f      	b.n	8000f3a <Get_CRLH_POSITION+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e01e      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000efe:	2304      	movs	r3, #4
 8000f00:	e01c      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000f02:	2308      	movs	r3, #8
 8000f04:	e01a      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000f06:	230c      	movs	r3, #12
 8000f08:	e018      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	e016      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000f0e:	2314      	movs	r3, #20
 8000f10:	e014      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000f12:	2318      	movs	r3, #24
 8000f14:	e012      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000f16:	231c      	movs	r3, #28
 8000f18:	e010      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e00e      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	e00c      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000f22:	2308      	movs	r3, #8
 8000f24:	e00a      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000f26:	230c      	movs	r3, #12
 8000f28:	e008      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	e006      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000f2e:	2314      	movs	r3, #20
 8000f30:	e004      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000f32:	2318      	movs	r3, #24
 8000f34:	e002      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000f36:	231c      	movs	r3, #28
 8000f38:	e000      	b.n	8000f3c <Get_CRLH_POSITION+0xbc>
		break;
	}
	return 0;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr

08000f46 <MCAL_GPIO_Init>:


void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 8000f46:	b590      	push	{r4, r7, lr}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
	//Port configuration register Low (GPIO_CRL) Configure Pins from 0 to 7
	//Port configuration register High (GPIO_CRH) Configure Pins from 8 to 15

	volatile uint32_t *configregister = NULL ;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Conf = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	2bff      	cmp	r3, #255	; 0xff
 8000f5e:	d801      	bhi.n	8000f64 <MCAL_GPIO_Init+0x1e>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	e001      	b.n	8000f68 <MCAL_GPIO_Init+0x22>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3304      	adds	r3, #4
 8000f68:	60bb      	str	r3, [r7, #8]

	//clear CNFx and MODEx
	(*configregister) &= ~(0xf << Get_CRLH_POSITION(PinConfig->GPIO_PinNumber));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff86 	bl	8000e80 <Get_CRLH_POSITION>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	230f      	movs	r3, #15
 8000f7a:	4093      	lsls	r3, r2
 8000f7c:	43da      	mvns	r2, r3
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	401a      	ands	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if(		PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD 	||
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	789b      	ldrb	r3, [r3, #2]
 8000f8c:	2b07      	cmp	r3, #7
 8000f8e:	d00b      	beq.n	8000fa8 <MCAL_GPIO_Init+0x62>
			PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP 	||
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	789b      	ldrb	r3, [r3, #2]
	if(		PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD 	||
 8000f94:	2b06      	cmp	r3, #6
 8000f96:	d007      	beq.n	8000fa8 <MCAL_GPIO_Init+0x62>
			PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD 	||
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	789b      	ldrb	r3, [r3, #2]
			PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP 	||
 8000f9c:	2b05      	cmp	r3, #5
 8000f9e:	d003      	beq.n	8000fa8 <MCAL_GPIO_Init+0x62>
			PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP )
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	789b      	ldrb	r3, [r3, #2]
			PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD 	||
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d10e      	bne.n	8000fc6 <MCAL_GPIO_Init+0x80>
	{
		//set CNFx and MODEx
		Pin_Conf = (((PinConfig->GPIO_Mode - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	789b      	ldrb	r3, [r3, #2]
 8000fac:	3b04      	subs	r3, #4
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	b25a      	sxtb	r2, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	78db      	ldrb	r3, [r3, #3]
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e02c      	b.n	8001020 <MCAL_GPIO_Init+0xda>
	}
	//if Pin in input
	else //Mode == 00
	{
		if(PinConfig->GPIO_Mode == GPIO_MODE_ANALOG || PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	789b      	ldrb	r3, [r3, #2]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <MCAL_GPIO_Init+0x90>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	789b      	ldrb	r3, [r3, #2]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d107      	bne.n	8000fe6 <MCAL_GPIO_Init+0xa0>
		{
			//set CNFx and MODEx
			Pin_Conf = ((PinConfig->GPIO_Mode << 2) | 0x0) & 0x0f;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	789b      	ldrb	r3, [r3, #2]
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e01c      	b.n	8001020 <MCAL_GPIO_Init+0xda>
		}
		else if(PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT) // consider it as input floating
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	789b      	ldrb	r3, [r3, #2]
 8000fea:	2b08      	cmp	r3, #8
 8000fec:	d102      	bne.n	8000ff4 <MCAL_GPIO_Init+0xae>
		{
			//set CNFx and MODEx
			Pin_Conf = ((GPIO_MODE_INPUT_FLO << 2) | 0x0) & 0x0f;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e015      	b.n	8001020 <MCAL_GPIO_Init+0xda>
		}
		else //PU and PD Input
		{
			Pin_Conf = ((GPIO_MODE_INPUT_PU << 2) | 0x0) & 0x0f;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	789b      	ldrb	r3, [r3, #2]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d107      	bne.n	8001010 <MCAL_GPIO_Init+0xca>
			{
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	8812      	ldrh	r2, [r2, #0]
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	e007      	b.n	8001020 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	8812      	ldrh	r2, [r2, #0]
 8001018:	43d2      	mvns	r2, r2
 800101a:	401a      	ands	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	60da      	str	r2, [r3, #12]
			}
		}
	}

	*configregister |= ((Pin_Conf) << Get_CRLH_POSITION(PinConfig->GPIO_PinNumber));
 8001020:	7bfc      	ldrb	r4, [r7, #15]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff2a 	bl	8000e80 <Get_CRLH_POSITION>
 800102c:	4603      	mov	r3, r0
 800102e:	fa04 f203 	lsl.w	r2, r4, r3
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	431a      	orrs	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	601a      	str	r2, [r3, #0]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	bd90      	pop	{r4, r7, pc}

08001044 <__libc_init_array>:
 8001044:	b570      	push	{r4, r5, r6, lr}
 8001046:	2500      	movs	r5, #0
 8001048:	4e0c      	ldr	r6, [pc, #48]	; (800107c <__libc_init_array+0x38>)
 800104a:	4c0d      	ldr	r4, [pc, #52]	; (8001080 <__libc_init_array+0x3c>)
 800104c:	1ba4      	subs	r4, r4, r6
 800104e:	10a4      	asrs	r4, r4, #2
 8001050:	42a5      	cmp	r5, r4
 8001052:	d109      	bne.n	8001068 <__libc_init_array+0x24>
 8001054:	f000 f81a 	bl	800108c <_init>
 8001058:	2500      	movs	r5, #0
 800105a:	4e0a      	ldr	r6, [pc, #40]	; (8001084 <__libc_init_array+0x40>)
 800105c:	4c0a      	ldr	r4, [pc, #40]	; (8001088 <__libc_init_array+0x44>)
 800105e:	1ba4      	subs	r4, r4, r6
 8001060:	10a4      	asrs	r4, r4, #2
 8001062:	42a5      	cmp	r5, r4
 8001064:	d105      	bne.n	8001072 <__libc_init_array+0x2e>
 8001066:	bd70      	pop	{r4, r5, r6, pc}
 8001068:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800106c:	4798      	blx	r3
 800106e:	3501      	adds	r5, #1
 8001070:	e7ee      	b.n	8001050 <__libc_init_array+0xc>
 8001072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001076:	4798      	blx	r3
 8001078:	3501      	adds	r5, #1
 800107a:	e7f2      	b.n	8001062 <__libc_init_array+0x1e>
 800107c:	080010c4 	.word	0x080010c4
 8001080:	080010c4 	.word	0x080010c4
 8001084:	080010c4 	.word	0x080010c4
 8001088:	080010c8 	.word	0x080010c8

0800108c <_init>:
 800108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108e:	bf00      	nop
 8001090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001092:	bc08      	pop	{r3}
 8001094:	469e      	mov	lr, r3
 8001096:	4770      	bx	lr

08001098 <_fini>:
 8001098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109a:	bf00      	nop
 800109c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109e:	bc08      	pop	{r3}
 80010a0:	469e      	mov	lr, r3
 80010a2:	4770      	bx	lr
