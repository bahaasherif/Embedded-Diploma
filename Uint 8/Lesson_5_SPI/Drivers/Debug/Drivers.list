
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000f00  08000f00  00010f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f18  08000f18  00010f20  2**0
                  CONTENTS
  4 .ARM          00000000  08000f18  08000f18  00010f20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f18  08000f20  00010f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f18  08000f18  00010f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f1c  08000f1c  00010f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000f20  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000f20  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f20  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005153  00000000  00000000  00010f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c6c  00000000  00000000  0001609c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000cc0  00000000  00000000  00016d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000220  00000000  00000000  000179c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001b8  00000000  00000000  00017be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000edb  00000000  00000000  00017da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000281f  00000000  00000000  00018c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a91f  00000000  00000000  0001b49a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00025db9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006b0  00000000  00000000  00025e34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ee8 	.word	0x08000ee8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ee8 	.word	0x08000ee8

08000170 <USART_IRQ_CallBack>:
//	}
//#endif
//}

void USART_IRQ_CallBack(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
#ifdef MCU_act_as_Master
	MCAL_UART_ReceiveData(USART1, &ch, Disable);
 8000174:	2201      	movs	r2, #1
 8000176:	490d      	ldr	r1, [pc, #52]	; (80001ac <USART_IRQ_CallBack+0x3c>)
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <USART_IRQ_CallBack+0x40>)
 800017a:	f000 fd47 	bl	8000c0c <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, Enable);
 800017e:	2200      	movs	r2, #0
 8000180:	490a      	ldr	r1, [pc, #40]	; (80001ac <USART_IRQ_CallBack+0x3c>)
 8000182:	480b      	ldr	r0, [pc, #44]	; (80001b0 <USART_IRQ_CallBack+0x40>)
 8000184:	f000 fd1c 	bl	8000bc0 <MCAL_UART_SendData>

	//send to spi
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	4809      	ldr	r0, [pc, #36]	; (80001b4 <USART_IRQ_CallBack+0x44>)
 800018e:	f000 fe6b 	bl	8000e68 <MCAL_GPIO_WritePin>
	MCAL_SPI_Tx_Rx(SPI1, &ch, polling_Enable);
 8000192:	2200      	movs	r2, #0
 8000194:	4905      	ldr	r1, [pc, #20]	; (80001ac <USART_IRQ_CallBack+0x3c>)
 8000196:	4808      	ldr	r0, [pc, #32]	; (80001b8 <USART_IRQ_CallBack+0x48>)
 8000198:	f000 fb9a 	bl	80008d0 <MCAL_SPI_Tx_Rx>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800019c:	2201      	movs	r2, #1
 800019e:	2110      	movs	r1, #16
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <USART_IRQ_CallBack+0x44>)
 80001a2:	f000 fe61 	bl	8000e68 <MCAL_GPIO_WritePin>
#endif
}
 80001a6:	bf00      	nop
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	20000028 	.word	0x20000028
 80001b0:	40013800 	.word	0x40013800
 80001b4:	40010800 	.word	0x40010800
 80001b8:	40013000 	.word	0x40013000

080001bc <clock_init>:

void clock_init()
{
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80001c0:	4b0a      	ldr	r3, [pc, #40]	; (80001ec <clock_init+0x30>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	4a09      	ldr	r2, [pc, #36]	; (80001ec <clock_init+0x30>)
 80001c6:	f043 0304 	orr.w	r3, r3, #4
 80001ca:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <clock_init+0x30>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <clock_init+0x30>)
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <clock_init+0x30>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4a03      	ldr	r2, [pc, #12]	; (80001ec <clock_init+0x30>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6193      	str	r3, [r2, #24]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	40021000 	.word	0x40021000

080001f0 <main>:

int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b08c      	sub	sp, #48	; 0x30
 80001f4:	af00      	add	r7, sp, #0

	clock_init();
 80001f6:	f7ff ffe1 	bl	80001bc <clock_init>
	//------------UART INIT--------------------
	//PA9	Tx
	//PA10	RX
	//PA11	CTS
	//PA12	RTS
	UART.BAUDRATE = UART_BaudRate_115200 ;
 80001fa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001fe:	623b      	str	r3, [r7, #32]
	UART.FlowCTRL = UART_FlowCTRL_None ;
 8000200:	2300      	movs	r3, #0
 8000202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	UART.IRQ_En = UART_IRQ_EN_RXNEIE ;
 8000206:	2320      	movs	r3, #32
 8000208:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	UART.USART_MODE = UART_MODE_TX_RX ;
 800020c:	230c      	movs	r3, #12
 800020e:	773b      	strb	r3, [r7, #28]
	UART.Parity = UART_Parity_Disable ;
 8000210:	2300      	movs	r3, #0
 8000212:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	UART.Payload_Length = UART_PayloadLength_8b ;
 8000216:	2300      	movs	r3, #0
 8000218:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	UART.StopBits = UART_StopBits_1b ;
 800021c:	2300      	movs	r3, #0
 800021e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	UART.P_IRQ_CallBack =  USART_IRQ_CallBack;
 8000222:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <main+0xa8>)
 8000224:	62fb      	str	r3, [r7, #44]	; 0x2c

	MCAL_UART_Init(USART1, &UART);
 8000226:	f107 031c 	add.w	r3, r7, #28
 800022a:	4619      	mov	r1, r3
 800022c:	481b      	ldr	r0, [pc, #108]	; (800029c <main+0xac>)
 800022e:	f000 fba5 	bl	800097c <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(USART1);
 8000232:	481a      	ldr	r0, [pc, #104]	; (800029c <main+0xac>)
 8000234:	f000 fc64 	bl	8000b00 <MCAL_UART_GPIO_SetPins>
	//PA6	MISO
	//PA7	MSIO
	SPI_Config_t SPI1CFG;

	//common configuration
	SPI1CFG.CLK_Phase = SPI_CLK_Phase_2nd_Edge;
 8000238:	2301      	movs	r3, #1
 800023a:	817b      	strh	r3, [r7, #10]
	SPI1CFG.CLK_Polarity = SPI_CLK_Polarity_High_idle;
 800023c:	2302      	movs	r3, #2
 800023e:	813b      	strh	r3, [r7, #8]
	SPI1CFG.Data_Size = SPI_Data_Size_8Bit;
 8000240:	2300      	movs	r3, #0
 8000242:	80fb      	strh	r3, [r7, #6]
	SPI1CFG.Frame_Format = SPI_Frame_Format_MSB_First;
 8000244:	2300      	movs	r3, #0
 8000246:	80bb      	strh	r3, [r7, #4]
	SPI1CFG.SPI_Baudrate_Prescalar = SPI_Baudrate_Prescalar_8;
 8000248:	2310      	movs	r3, #16
 800024a:	81fb      	strh	r3, [r7, #14]
	SPI1CFG.Communication_MODE = SPI_DIRECTION_2Lines;
 800024c:	2300      	movs	r3, #0
 800024e:	807b      	strh	r3, [r7, #2]

#ifdef MCU_act_as_Master
	SPI1CFG.Device_Mode = SPI_DEVICE_MODE_MASTER;
 8000250:	2304      	movs	r3, #4
 8000252:	803b      	strh	r3, [r7, #0]
	SPI1CFG.IRQ_Enable = SPI_IRQ_Enable_None;
 8000254:	2300      	movs	r3, #0
 8000256:	823b      	strh	r3, [r7, #16]
	SPI1CFG.NSS = SPI_NSS_SW_InternalSoft_Set;
 8000258:	f44f 7340 	mov.w	r3, #768	; 0x300
 800025c:	81bb      	strh	r3, [r7, #12]
	SPI1CFG.P_IRQ_CallBack = NULL;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

	//configure Select Slave on PA4 by GPIO
	PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000262:	2310      	movs	r3, #16
 8000264:	833b      	strh	r3, [r7, #24]
    PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000266:	2304      	movs	r3, #4
 8000268:	76bb      	strb	r3, [r7, #26]
    PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800026a:	2301      	movs	r3, #1
 800026c:	76fb      	strb	r3, [r7, #27]
    MCAL_GPIO_Init(GPIOA, &PinConfig);
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	4619      	mov	r1, r3
 8000274:	480a      	ldr	r0, [pc, #40]	; (80002a0 <main+0xb0>)
 8000276:	f000 fd78 	bl	8000d6a <MCAL_GPIO_Init>

    MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800027a:	2201      	movs	r2, #1
 800027c:	2110      	movs	r1, #16
 800027e:	4808      	ldr	r0, [pc, #32]	; (80002a0 <main+0xb0>)
 8000280:	f000 fdf2 	bl	8000e68 <MCAL_GPIO_WritePin>
//	SPI1CFG.IRQ_Enable = SPI_IRQ_Enable_RXNEIE;
//	SPI1CFG.NSS = SPI_NSS_HW_SLAVE;
//	SPI1CFG.P_IRQ_CallBack = SPI1_IRQ_CallBack;
//#endif

	MCAL_SPI_Init(SPI1, &SPI1CFG);
 8000284:	463b      	mov	r3, r7
 8000286:	4619      	mov	r1, r3
 8000288:	4806      	ldr	r0, [pc, #24]	; (80002a4 <main+0xb4>)
 800028a:	f000 f989 	bl	80005a0 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 800028e:	4805      	ldr	r0, [pc, #20]	; (80002a4 <main+0xb4>)
 8000290:	f000 fa1c 	bl	80006cc <MCAL_SPI_GPIO_Set_Pins>




	while(1)
 8000294:	e7fe      	b.n	8000294 <main+0xa4>
 8000296:	bf00      	nop
 8000298:	08000171 	.word	0x08000171
 800029c:	40013800 	.word	0x40013800
 80002a0:	40010800 	.word	0x40010800
 80002a4:	40013000 	.word	0x40013000

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 fde3 	bl	8000ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ff89 	bl	80001f0 <main>

080002de <LoopForever>:

LoopForever:
    b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	08000f20 	.word	0x08000f20
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	20000068 	.word	0x20000068

080002f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC1_2_IRQHandler>
	...

080002fc <EXTI0_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*-
//ISR Functions
//-*-*-*-*-*-*-*-*-*-*-*

void EXTI0_IRQHandler(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	//clear the pending bit
	EXTI->PR |= 1<<0;
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <EXTI0_IRQHandler+0x1c>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	4a04      	ldr	r2, [pc, #16]	; (8000318 <EXTI0_IRQHandler+0x1c>)
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6153      	str	r3, [r2, #20]
	//callback function
	GP_IRQ_CallBack[0]();
 800030c:	4b03      	ldr	r3, [pc, #12]	; (800031c <EXTI0_IRQHandler+0x20>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4798      	blx	r3
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40010400 	.word	0x40010400
 800031c:	2000002c 	.word	0x2000002c

08000320 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	//clear the pending bit
	EXTI->PR |= 1<<1;
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <EXTI1_IRQHandler+0x1c>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a04      	ldr	r2, [pc, #16]	; (800033c <EXTI1_IRQHandler+0x1c>)
 800032a:	f043 0302 	orr.w	r3, r3, #2
 800032e:	6153      	str	r3, [r2, #20]
	//callback function
	GP_IRQ_CallBack[1]();
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <EXTI1_IRQHandler+0x20>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	4798      	blx	r3
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40010400 	.word	0x40010400
 8000340:	2000002c 	.word	0x2000002c

08000344 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	//clear the pending bit
	EXTI->PR |= 1<<2;
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <EXTI2_IRQHandler+0x1c>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <EXTI2_IRQHandler+0x1c>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6153      	str	r3, [r2, #20]
	//callback function
	GP_IRQ_CallBack[2]();
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <EXTI2_IRQHandler+0x20>)
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	4798      	blx	r3
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40010400 	.word	0x40010400
 8000364:	2000002c 	.word	0x2000002c

08000368 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	//clear the pending bit
	EXTI->PR |= 1<<3;
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <EXTI3_IRQHandler+0x1c>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a04      	ldr	r2, [pc, #16]	; (8000384 <EXTI3_IRQHandler+0x1c>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6153      	str	r3, [r2, #20]
	//callback function
	GP_IRQ_CallBack[3]();
 8000378:	4b03      	ldr	r3, [pc, #12]	; (8000388 <EXTI3_IRQHandler+0x20>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	4798      	blx	r3
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40010400 	.word	0x40010400
 8000388:	2000002c 	.word	0x2000002c

0800038c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	//clear the pending bit
	EXTI->PR |= 1<<4;
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <EXTI4_IRQHandler+0x1c>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <EXTI4_IRQHandler+0x1c>)
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	6153      	str	r3, [r2, #20]
	//callback function
	GP_IRQ_CallBack[4]();
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <EXTI4_IRQHandler+0x20>)
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	4798      	blx	r3
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40010400 	.word	0x40010400
 80003ac:	2000002c 	.word	0x2000002c

080003b0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5)
 80003b4:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <EXTI9_5_IRQHandler+0x84>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f003 0320 	and.w	r3, r3, #32
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d005      	beq.n	80003cc <EXTI9_5_IRQHandler+0x1c>
	{
		EXTI->PR = 1<<5;
 80003c0:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <EXTI9_5_IRQHandler+0x84>)
 80003c2:	2220      	movs	r2, #32
 80003c4:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[5]();
 80003c6:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <EXTI9_5_IRQHandler+0x88>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<6)
 80003cc:	4b19      	ldr	r3, [pc, #100]	; (8000434 <EXTI9_5_IRQHandler+0x84>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d005      	beq.n	80003e4 <EXTI9_5_IRQHandler+0x34>
	{
		EXTI->PR = 1<<6;
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <EXTI9_5_IRQHandler+0x84>)
 80003da:	2240      	movs	r2, #64	; 0x40
 80003dc:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[6]();
 80003de:	4b16      	ldr	r3, [pc, #88]	; (8000438 <EXTI9_5_IRQHandler+0x88>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<7)
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <EXTI9_5_IRQHandler+0x84>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d005      	beq.n	80003fc <EXTI9_5_IRQHandler+0x4c>
	{
		EXTI->PR = 1<<7;
 80003f0:	4b10      	ldr	r3, [pc, #64]	; (8000434 <EXTI9_5_IRQHandler+0x84>)
 80003f2:	2280      	movs	r2, #128	; 0x80
 80003f4:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[7]();
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <EXTI9_5_IRQHandler+0x88>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<8)
 80003fc:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <EXTI9_5_IRQHandler+0x84>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000404:	2b00      	cmp	r3, #0
 8000406:	d006      	beq.n	8000416 <EXTI9_5_IRQHandler+0x66>
	{
		EXTI->PR = 1<<8;
 8000408:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <EXTI9_5_IRQHandler+0x84>)
 800040a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800040e:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[8]();
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <EXTI9_5_IRQHandler+0x88>)
 8000412:	6a1b      	ldr	r3, [r3, #32]
 8000414:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<9)
 8000416:	4b07      	ldr	r3, [pc, #28]	; (8000434 <EXTI9_5_IRQHandler+0x84>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800041e:	2b00      	cmp	r3, #0
 8000420:	d006      	beq.n	8000430 <EXTI9_5_IRQHandler+0x80>
	{
		EXTI->PR = 1<<9;
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <EXTI9_5_IRQHandler+0x84>)
 8000424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000428:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[9]();
 800042a:	4b03      	ldr	r3, [pc, #12]	; (8000438 <EXTI9_5_IRQHandler+0x88>)
 800042c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800042e:	4798      	blx	r3
	}

}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40010400 	.word	0x40010400
 8000438:	2000002c 	.word	0x2000002c

0800043c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10)
 8000440:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <EXTI15_10_IRQHandler+0xa4>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000448:	2b00      	cmp	r3, #0
 800044a:	d006      	beq.n	800045a <EXTI15_10_IRQHandler+0x1e>
	{
		EXTI->PR = 1<<10;
 800044c:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <EXTI15_10_IRQHandler+0xa4>)
 800044e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000452:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[10]();
 8000454:	4b23      	ldr	r3, [pc, #140]	; (80004e4 <EXTI15_10_IRQHandler+0xa8>)
 8000456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000458:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<11)
 800045a:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <EXTI15_10_IRQHandler+0xa4>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000462:	2b00      	cmp	r3, #0
 8000464:	d006      	beq.n	8000474 <EXTI15_10_IRQHandler+0x38>
	{
		EXTI->PR = 1<<11;
 8000466:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <EXTI15_10_IRQHandler+0xa4>)
 8000468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800046c:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[11]();
 800046e:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <EXTI15_10_IRQHandler+0xa8>)
 8000470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000472:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<12)
 8000474:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <EXTI15_10_IRQHandler+0xa4>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800047c:	2b00      	cmp	r3, #0
 800047e:	d006      	beq.n	800048e <EXTI15_10_IRQHandler+0x52>
	{
		EXTI->PR = 1<<12;
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <EXTI15_10_IRQHandler+0xa4>)
 8000482:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000486:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[12]();
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <EXTI15_10_IRQHandler+0xa8>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<13)
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <EXTI15_10_IRQHandler+0xa4>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000496:	2b00      	cmp	r3, #0
 8000498:	d006      	beq.n	80004a8 <EXTI15_10_IRQHandler+0x6c>
	{
		EXTI->PR = 1<<13;
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <EXTI15_10_IRQHandler+0xa4>)
 800049c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004a0:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[13]();
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <EXTI15_10_IRQHandler+0xa8>)
 80004a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a6:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<14)
 80004a8:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <EXTI15_10_IRQHandler+0xa4>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d006      	beq.n	80004c2 <EXTI15_10_IRQHandler+0x86>
	{
		EXTI->PR = 1<<14;
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <EXTI15_10_IRQHandler+0xa4>)
 80004b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004ba:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[14]();
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <EXTI15_10_IRQHandler+0xa8>)
 80004be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004c0:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<15)
 80004c2:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <EXTI15_10_IRQHandler+0xa4>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d006      	beq.n	80004dc <EXTI15_10_IRQHandler+0xa0>
	{
		EXTI->PR = 1<<15;
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <EXTI15_10_IRQHandler+0xa4>)
 80004d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004d4:	615a      	str	r2, [r3, #20]
		GP_IRQ_CallBack[15]();
 80004d6:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <EXTI15_10_IRQHandler+0xa8>)
 80004d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004da:	4798      	blx	r3
	}

}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40010400 	.word	0x40010400
 80004e4:	2000002c 	.word	0x2000002c

080004e8 <MCAL_RCC_Get_SYSCLK_FREQ>:
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHB_Prescalar[16u] = {0,0,0,0,0,0,0,1,2,3,4,6,7,8};

uint32_t MCAL_RCC_Get_SYSCLK_FREQ(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: not applicable*/

	switch ((RCC->CFGR >> 2 ) & 0b11)
 80004ec:	4b0b      	ldr	r3, [pc, #44]	; (800051c <MCAL_RCC_Get_SYSCLK_FREQ+0x34>)
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	089b      	lsrs	r3, r3, #2
 80004f2:	f003 0303 	and.w	r3, r3, #3
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d006      	beq.n	8000508 <MCAL_RCC_Get_SYSCLK_FREQ+0x20>
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d302      	bcc.n	8000504 <MCAL_RCC_Get_SYSCLK_FREQ+0x1c>
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d004      	beq.n	800050c <MCAL_RCC_Get_SYSCLK_FREQ+0x24>
 8000502:	e005      	b.n	8000510 <MCAL_RCC_Get_SYSCLK_FREQ+0x28>
	{
		case 0:
			return HSI_CLK;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MCAL_RCC_Get_SYSCLK_FREQ+0x38>)
 8000506:	e004      	b.n	8000512 <MCAL_RCC_Get_SYSCLK_FREQ+0x2a>
			break;
		case 1:
			return HSE_CLK;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MCAL_RCC_Get_SYSCLK_FREQ+0x3c>)
 800050a:	e002      	b.n	8000512 <MCAL_RCC_Get_SYSCLK_FREQ+0x2a>
			break;
		case 2:
			return 16000000;
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <MCAL_RCC_Get_SYSCLK_FREQ+0x3c>)
 800050e:	e000      	b.n	8000512 <MCAL_RCC_Get_SYSCLK_FREQ+0x2a>

			break;

		default:
			return 0;
 8000510:	2300      	movs	r3, #0
			break;

		}
		return 0;
}
 8000512:	4618      	mov	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000
 8000520:	007a1200 	.word	0x007a1200
 8000524:	00f42400 	.word	0x00f42400

08000528 <MCAL_RCC_Get_HCLK_FREQ>:

uint32_t MCAL_RCC_Get_HCLK_FREQ(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	return MCAL_RCC_Get_SYSCLK_FREQ() >> AHB_Prescalar[(RCC->CFGR >> 4) & 0b1111];
 800052c:	f7ff ffdc 	bl	80004e8 <MCAL_RCC_Get_SYSCLK_FREQ>
 8000530:	4601      	mov	r1, r0
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <MCAL_RCC_Get_HCLK_FREQ+0x20>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	091b      	lsrs	r3, r3, #4
 8000538:	f003 030f 	and.w	r3, r3, #15
 800053c:	4a03      	ldr	r2, [pc, #12]	; (800054c <MCAL_RCC_Get_HCLK_FREQ+0x24>)
 800053e:	5cd3      	ldrb	r3, [r2, r3]
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000544:	4618      	mov	r0, r3
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000
 800054c:	08000f08 	.word	0x08000f08

08000550 <MCAL_RCC_Get_PCLK1_FREQ>:

uint32_t MCAL_RCC_Get_PCLK1_FREQ(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	return MCAL_RCC_Get_HCLK_FREQ()	>> APB_Prescalar[(RCC->CFGR >> 8) & 0b111];
 8000554:	f7ff ffe8 	bl	8000528 <MCAL_RCC_Get_HCLK_FREQ>
 8000558:	4601      	mov	r1, r0
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <MCAL_RCC_Get_PCLK1_FREQ+0x20>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	0a1b      	lsrs	r3, r3, #8
 8000560:	f003 0307 	and.w	r3, r3, #7
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <MCAL_RCC_Get_PCLK1_FREQ+0x24>)
 8000566:	5cd3      	ldrb	r3, [r2, r3]
 8000568:	fa21 f303 	lsr.w	r3, r1, r3
}
 800056c:	4618      	mov	r0, r3
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	08000f00 	.word	0x08000f00

08000578 <MCAL_RCC_Get_PCLK2_FREQ>:

uint32_t MCAL_RCC_Get_PCLK2_FREQ(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	return MCAL_RCC_Get_HCLK_FREQ()	>> APB_Prescalar[(RCC->CFGR >> 11) & 0b111];
 800057c:	f7ff ffd4 	bl	8000528 <MCAL_RCC_Get_HCLK_FREQ>
 8000580:	4601      	mov	r1, r0
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <MCAL_RCC_Get_PCLK2_FREQ+0x20>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	0adb      	lsrs	r3, r3, #11
 8000588:	f003 0307 	and.w	r3, r3, #7
 800058c:	4a03      	ldr	r2, [pc, #12]	; (800059c <MCAL_RCC_Get_PCLK2_FREQ+0x24>)
 800058e:	5cd3      	ldrb	r3, [r2, r3]
 8000590:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000594:	4618      	mov	r0, r3
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40021000 	.word	0x40021000
 800059c:	08000f00 	.word	0x08000f00

080005a0 <MCAL_SPI_Init>:
//-------------------------------------------------
// GENERIC FUNCTIONS
//-------------------------------------------------

void MCAL_SPI_Init				(SPI_TypeDef* SPIx, SPI_Config_t* SPI_Config)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
	uint16_t tmpreg_CR1=0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	81fb      	strh	r3, [r7, #14]
	uint16_t tmpreg_CR2=0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	81bb      	strh	r3, [r7, #12]

	if(SPIx == SPI1)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a40      	ldr	r2, [pc, #256]	; (80006b8 <MCAL_SPI_Init+0x118>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d109      	bne.n	80005ce <MCAL_SPI_Init+0x2e>
	{
		Global_SPI_Config[SPI1_Index] = SPI_Config;
 80005ba:	4a40      	ldr	r2, [pc, #256]	; (80006bc <MCAL_SPI_Init+0x11c>)
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 80005c0:	4b3f      	ldr	r3, [pc, #252]	; (80006c0 <MCAL_SPI_Init+0x120>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a3e      	ldr	r2, [pc, #248]	; (80006c0 <MCAL_SPI_Init+0x120>)
 80005c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	e00c      	b.n	80005e8 <MCAL_SPI_Init+0x48>
	}
	else if(SPIx == SPI2)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a3c      	ldr	r2, [pc, #240]	; (80006c4 <MCAL_SPI_Init+0x124>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d108      	bne.n	80005e8 <MCAL_SPI_Init+0x48>
	{
		Global_SPI_Config[SPI2_Index] = SPI_Config;
 80005d6:	4a39      	ldr	r2, [pc, #228]	; (80006bc <MCAL_SPI_Init+0x11c>)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 80005dc:	4b38      	ldr	r3, [pc, #224]	; (80006c0 <MCAL_SPI_Init+0x120>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	4a37      	ldr	r2, [pc, #220]	; (80006c0 <MCAL_SPI_Init+0x120>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	61d3      	str	r3, [r2, #28]
	}
	//SPI enable
	tmpreg_CR1 = (0x1U<<6);
 80005e8:	2340      	movs	r3, #64	; 0x40
 80005ea:	81fb      	strh	r3, [r7, #14]

	//Master or slave
	tmpreg_CR1 |= SPI_Config->Device_Mode;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	881a      	ldrh	r2, [r3, #0]
 80005f0:	89fb      	ldrh	r3, [r7, #14]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	81fb      	strh	r3, [r7, #14]

	//communication mode
	tmpreg_CR1 |= SPI_Config->Communication_MODE;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	885a      	ldrh	r2, [r3, #2]
 80005fa:	89fb      	ldrh	r3, [r7, #14]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	81fb      	strh	r3, [r7, #14]

	//SPI frame format
	tmpreg_CR1 |= SPI_Config->Frame_Format;
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	889a      	ldrh	r2, [r3, #4]
 8000604:	89fb      	ldrh	r3, [r7, #14]
 8000606:	4313      	orrs	r3, r2
 8000608:	81fb      	strh	r3, [r7, #14]

	//data size
	tmpreg_CR1 |= SPI_Config->Data_Size;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	88da      	ldrh	r2, [r3, #6]
 800060e:	89fb      	ldrh	r3, [r7, #14]
 8000610:	4313      	orrs	r3, r2
 8000612:	81fb      	strh	r3, [r7, #14]

	//polarity
	tmpreg_CR1 |= SPI_Config->CLK_Polarity;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	891a      	ldrh	r2, [r3, #8]
 8000618:	89fb      	ldrh	r3, [r7, #14]
 800061a:	4313      	orrs	r3, r2
 800061c:	81fb      	strh	r3, [r7, #14]

	//phase
	tmpreg_CR1 |= SPI_Config->CLK_Phase;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	895a      	ldrh	r2, [r3, #10]
 8000622:	89fb      	ldrh	r3, [r7, #14]
 8000624:	4313      	orrs	r3, r2
 8000626:	81fb      	strh	r3, [r7, #14]

	//NSS
	if(SPI_Config->NSS == SPI_NSS_HW_MASTER_SS_Output_Enable)
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	899b      	ldrh	r3, [r3, #12]
 800062c:	2b04      	cmp	r3, #4
 800062e:	d105      	bne.n	800063c <MCAL_SPI_Init+0x9c>
		tmpreg_CR2 |= SPI_Config->NSS;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	899a      	ldrh	r2, [r3, #12]
 8000634:	89bb      	ldrh	r3, [r7, #12]
 8000636:	4313      	orrs	r3, r2
 8000638:	81bb      	strh	r3, [r7, #12]
 800063a:	e00e      	b.n	800065a <MCAL_SPI_Init+0xba>
	else if((SPI_Config->NSS == SPI_NSS_HW_MASTER_SS_Output_Disable) || (SPI_Config->NSS == SPI_NSS_HW_SLAVE))
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	899b      	ldrh	r3, [r3, #12]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d105      	bne.n	8000650 <MCAL_SPI_Init+0xb0>
		tmpreg_CR2 &= SPI_Config->NSS;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	899a      	ldrh	r2, [r3, #12]
 8000648:	89bb      	ldrh	r3, [r7, #12]
 800064a:	4013      	ands	r3, r2
 800064c:	81bb      	strh	r3, [r7, #12]
 800064e:	e004      	b.n	800065a <MCAL_SPI_Init+0xba>
	else
		tmpreg_CR1 |= SPI_Config->NSS;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	899a      	ldrh	r2, [r3, #12]
 8000654:	89fb      	ldrh	r3, [r7, #14]
 8000656:	4313      	orrs	r3, r2
 8000658:	81fb      	strh	r3, [r7, #14]

	//baudrate
	tmpreg_CR1 |= SPI_Config->SPI_Baudrate_Prescalar;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	89da      	ldrh	r2, [r3, #14]
 800065e:	89fb      	ldrh	r3, [r7, #14]
 8000660:	4313      	orrs	r3, r2
 8000662:	81fb      	strh	r3, [r7, #14]

	//interrupt
	if(SPI_Config->IRQ_Enable != SPI_IRQ_Enable_None)
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	8a1b      	ldrh	r3, [r3, #16]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d019      	beq.n	80006a0 <MCAL_SPI_Init+0x100>
	{
		tmpreg_CR2 |= SPI_Config->IRQ_Enable;
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	8a1a      	ldrh	r2, [r3, #16]
 8000670:	89bb      	ldrh	r3, [r7, #12]
 8000672:	4313      	orrs	r3, r2
 8000674:	81bb      	strh	r3, [r7, #12]

		if(SPIx == SPI1)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <MCAL_SPI_Init+0x118>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d106      	bne.n	800068c <MCAL_SPI_Init+0xec>
			NVIC_IRQ35_SPI1_Enable;
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MCAL_SPI_Init+0x128>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <MCAL_SPI_Init+0x128>)
 8000684:	f043 0308 	orr.w	r3, r3, #8
 8000688:	6013      	str	r3, [r2, #0]
 800068a:	e009      	b.n	80006a0 <MCAL_SPI_Init+0x100>
		else if (SPIx == SPI2)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <MCAL_SPI_Init+0x124>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d105      	bne.n	80006a0 <MCAL_SPI_Init+0x100>
			NVIC_IRQ36_SPI2_Enable;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MCAL_SPI_Init+0x128>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <MCAL_SPI_Init+0x128>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6013      	str	r3, [r2, #0]
	}

	SPIx->SPI_CR1 = tmpreg_CR1;
 80006a0:	89fa      	ldrh	r2, [r7, #14]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = tmpreg_CR2;
 80006a6:	89ba      	ldrh	r2, [r7, #12]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	605a      	str	r2, [r3, #4]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40013000 	.word	0x40013000
 80006bc:	2000001c 	.word	0x2000001c
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40003800 	.word	0x40003800
 80006c8:	e000e104 	.word	0xe000e104

080006cc <MCAL_SPI_GPIO_Set_Pins>:
		NVIC_IRQ36_SPI2_Disable;
	}
}

void MCAL_SPI_GPIO_Set_Pins		(SPI_TypeDef* SPIx)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;

	if(SPIx == SPI1)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a79      	ldr	r2, [pc, #484]	; (80008bc <MCAL_SPI_GPIO_Set_Pins+0x1f0>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d170      	bne.n	80007be <MCAL_SPI_GPIO_Set_Pins+0xf2>
		//PA4: SPI1_NSS
		//PA5: SPI1_SCK
		//PA6: SPI_MISO
		//PA7: SPI_MOSI

		if(Global_SPI_Config[SPI1_Index]->Device_Mode == SPI_DEVICE_MODE_MASTER)
 80006dc:	4b78      	ldr	r3, [pc, #480]	; (80008c0 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	d135      	bne.n	8000752 <MCAL_SPI_GPIO_Set_Pins+0x86>
		{
			//PA4: SPI1_NSS
			switch (Global_SPI_Config[SPI1_Index]->NSS)
 80006e6:	4b76      	ldr	r3, [pc, #472]	; (80008c0 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	899b      	ldrh	r3, [r3, #12]
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	d000      	beq.n	80006f2 <MCAL_SPI_GPIO_Set_Pins+0x26>
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
				MCAL_GPIO_Init(GPIOA, &PinCfg);
				break;
			default:
				break;
 80006f0:	e00c      	b.n	800070c <MCAL_SPI_GPIO_Set_Pins+0x40>
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80006f2:	2310      	movs	r3, #16
 80006f4:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80006f6:	2306      	movs	r3, #6
 80006f8:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	4619      	mov	r1, r3
 8000704:	486f      	ldr	r0, [pc, #444]	; (80008c4 <MCAL_SPI_GPIO_Set_Pins+0x1f8>)
 8000706:	f000 fb30 	bl	8000d6a <MCAL_GPIO_Init>
				break;
 800070a:	bf00      	nop
			}

			//PA5: SPI1_SCK
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800070c:	2320      	movs	r3, #32
 800070e:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000710:	2306      	movs	r3, #6
 8000712:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000714:	2301      	movs	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	4619      	mov	r1, r3
 800071e:	4869      	ldr	r0, [pc, #420]	; (80008c4 <MCAL_SPI_GPIO_Set_Pins+0x1f8>)
 8000720:	f000 fb23 	bl	8000d6a <MCAL_GPIO_Init>

			//PA6: SPI_MISO
			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000724:	2340      	movs	r3, #64	; 0x40
 8000726:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000728:	2301      	movs	r3, #1
 800072a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	4619      	mov	r1, r3
 8000732:	4864      	ldr	r0, [pc, #400]	; (80008c4 <MCAL_SPI_GPIO_Set_Pins+0x1f8>)
 8000734:	f000 fb19 	bl	8000d6a <MCAL_GPIO_Init>

			//PA7: SPI_MOSI
			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800073c:	2306      	movs	r3, #6
 800073e:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000740:	2301      	movs	r3, #1
 8000742:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	4619      	mov	r1, r3
 800074a:	485e      	ldr	r0, [pc, #376]	; (80008c4 <MCAL_SPI_GPIO_Set_Pins+0x1f8>)
 800074c:	f000 fb0d 	bl	8000d6a <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
	}
}
 8000750:	e0b0      	b.n	80008b4 <MCAL_SPI_GPIO_Set_Pins+0x1e8>
		else if(Global_SPI_Config[SPI1_Index]->Device_Mode == SPI_DEVICE_MODE_SLAVE)
 8000752:	4b5b      	ldr	r3, [pc, #364]	; (80008c0 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	f040 80ab 	bne.w	80008b4 <MCAL_SPI_GPIO_Set_Pins+0x1e8>
			if(Global_SPI_Config[SPI1_Index]->NSS == SPI_NSS_HW_SLAVE)
 800075e:	4b58      	ldr	r3, [pc, #352]	; (80008c0 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	899b      	ldrh	r3, [r3, #12]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d109      	bne.n	800077c <MCAL_SPI_GPIO_Set_Pins+0xb0>
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000768:	2310      	movs	r3, #16
 800076a:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800076c:	2301      	movs	r3, #1
 800076e:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	4619      	mov	r1, r3
 8000776:	4853      	ldr	r0, [pc, #332]	; (80008c4 <MCAL_SPI_GPIO_Set_Pins+0x1f8>)
 8000778:	f000 faf7 	bl	8000d6a <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800077c:	2320      	movs	r3, #32
 800077e:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000780:	2301      	movs	r3, #1
 8000782:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	484e      	ldr	r0, [pc, #312]	; (80008c4 <MCAL_SPI_GPIO_Set_Pins+0x1f8>)
 800078c:	f000 faed 	bl	8000d6a <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000790:	2340      	movs	r3, #64	; 0x40
 8000792:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000794:	2306      	movs	r3, #6
 8000796:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000798:	2301      	movs	r3, #1
 800079a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	4619      	mov	r1, r3
 80007a2:	4848      	ldr	r0, [pc, #288]	; (80008c4 <MCAL_SPI_GPIO_Set_Pins+0x1f8>)
 80007a4:	f000 fae1 	bl	8000d6a <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80007ac:	2301      	movs	r3, #1
 80007ae:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	4843      	ldr	r0, [pc, #268]	; (80008c4 <MCAL_SPI_GPIO_Set_Pins+0x1f8>)
 80007b8:	f000 fad7 	bl	8000d6a <MCAL_GPIO_Init>
}
 80007bc:	e07a      	b.n	80008b4 <MCAL_SPI_GPIO_Set_Pins+0x1e8>
	else if(SPIx == SPI2)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a41      	ldr	r2, [pc, #260]	; (80008c8 <MCAL_SPI_GPIO_Set_Pins+0x1fc>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d176      	bne.n	80008b4 <MCAL_SPI_GPIO_Set_Pins+0x1e8>
		if(Global_SPI_Config[SPI2_Index]->Device_Mode == SPI_DEVICE_MODE_MASTER)
 80007c6:	4b3e      	ldr	r3, [pc, #248]	; (80008c0 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	d139      	bne.n	8000844 <MCAL_SPI_GPIO_Set_Pins+0x178>
			switch (Global_SPI_Config[SPI2_Index]->NSS)
 80007d0:	4b3b      	ldr	r3, [pc, #236]	; (80008c0 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	899b      	ldrh	r3, [r3, #12]
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d000      	beq.n	80007dc <MCAL_SPI_GPIO_Set_Pins+0x110>
				break;
 80007da:	e00d      	b.n	80007f8 <MCAL_SPI_GPIO_Set_Pins+0x12c>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80007dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e0:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80007e2:	2306      	movs	r3, #6
 80007e4:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80007e6:	2301      	movs	r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	4836      	ldr	r0, [pc, #216]	; (80008cc <MCAL_SPI_GPIO_Set_Pins+0x200>)
 80007f2:	f000 faba 	bl	8000d6a <MCAL_GPIO_Init>
				break;
 80007f6:	bf00      	nop
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80007f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fc:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80007fe:	2306      	movs	r3, #6
 8000800:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000802:	2301      	movs	r3, #1
 8000804:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	4619      	mov	r1, r3
 800080c:	482f      	ldr	r0, [pc, #188]	; (80008cc <MCAL_SPI_GPIO_Set_Pins+0x200>)
 800080e:	f000 faac 	bl	8000d6a <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000812:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000816:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000818:	2301      	movs	r3, #1
 800081a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	482a      	ldr	r0, [pc, #168]	; (80008cc <MCAL_SPI_GPIO_Set_Pins+0x200>)
 8000824:	f000 faa1 	bl	8000d6a <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800082c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800082e:	2306      	movs	r3, #6
 8000830:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000832:	2301      	movs	r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4619      	mov	r1, r3
 800083c:	4823      	ldr	r0, [pc, #140]	; (80008cc <MCAL_SPI_GPIO_Set_Pins+0x200>)
 800083e:	f000 fa94 	bl	8000d6a <MCAL_GPIO_Init>
}
 8000842:	e037      	b.n	80008b4 <MCAL_SPI_GPIO_Set_Pins+0x1e8>
		else if(Global_SPI_Config[SPI2_Index]->Device_Mode == SPI_DEVICE_MODE_SLAVE)
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d132      	bne.n	80008b4 <MCAL_SPI_GPIO_Set_Pins+0x1e8>
			if(Global_SPI_Config[SPI2_Index]->NSS == SPI_NSS_HW_SLAVE)
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	899b      	ldrh	r3, [r3, #12]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d10a      	bne.n	800086e <MCAL_SPI_GPIO_Set_Pins+0x1a2>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085c:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800085e:	2301      	movs	r3, #1
 8000860:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	4818      	ldr	r0, [pc, #96]	; (80008cc <MCAL_SPI_GPIO_Set_Pins+0x200>)
 800086a:	f000 fa7e 	bl	8000d6a <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 800086e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000872:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000874:	2301      	movs	r3, #1
 8000876:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4619      	mov	r1, r3
 800087e:	4813      	ldr	r0, [pc, #76]	; (80008cc <MCAL_SPI_GPIO_Set_Pins+0x200>)
 8000880:	f000 fa73 	bl	8000d6a <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000884:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000888:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800088a:	2306      	movs	r3, #6
 800088c:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800088e:	2301      	movs	r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <MCAL_SPI_GPIO_Set_Pins+0x200>)
 800089a:	f000 fa66 	bl	8000d6a <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 800089e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008a2:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80008a4:	2301      	movs	r3, #1
 80008a6:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4619      	mov	r1, r3
 80008ae:	4807      	ldr	r0, [pc, #28]	; (80008cc <MCAL_SPI_GPIO_Set_Pins+0x200>)
 80008b0:	f000 fa5b 	bl	8000d6a <MCAL_GPIO_Init>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40013000 	.word	0x40013000
 80008c0:	2000001c 	.word	0x2000001c
 80008c4:	40010800 	.word	0x40010800
 80008c8:	40003800 	.word	0x40003800
 80008cc:	40010c00 	.word	0x40010c00

080008d0 <MCAL_SPI_Tx_Rx>:

	*pTxBuffer = SPIx->SPI_DR;
}

void MCAL_SPI_Tx_Rx				(SPI_TypeDef* SPIx, uint16_t* pTxBuffer, Polling_Mechanism PollingEn)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	4613      	mov	r3, r2
 80008dc:	71fb      	strb	r3, [r7, #7]
	if(PollingEn == polling_Enable)
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d106      	bne.n	80008f2 <MCAL_SPI_Tx_Rx+0x22>
		while(!((SPIx->SPI_SR) & SPI_SR_TXE));
 80008e4:	bf00      	nop
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f9      	beq.n	80008e6 <MCAL_SPI_Tx_Rx+0x16>
	SPIx->SPI_DR = *pTxBuffer;
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	60da      	str	r2, [r3, #12]

	if(PollingEn == polling_Enable)
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d106      	bne.n	8000910 <MCAL_SPI_Tx_Rx+0x40>
		while(!((SPIx->SPI_SR) & SPI_SR_RXNE) );
 8000902:	bf00      	nop
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0f9      	beq.n	8000904 <MCAL_SPI_Tx_Rx+0x34>
	*pTxBuffer = SPIx->SPI_DR;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	b29a      	uxth	r2, r3
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	801a      	strh	r2, [r3, #0]
}
 800091a:	bf00      	nop
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <SPI2_IRQHandler>:
	irq_src.ERRI =  (SPI1->SPI_SR & (1<<4) >> 4 );
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
}

void SPI2_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
	S_IRQ_SRC irq_src;
	irq_src.TXE = (SPI2->SPI_SR & (1<<1) >> 1 );
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <SPI2_IRQHandler+0x50>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	793b      	ldrb	r3, [r7, #4]
 8000936:	f362 0300 	bfi	r3, r2, #0, #1
 800093a:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = (SPI2->SPI_SR & (1<<0) >> 0 );
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <SPI2_IRQHandler+0x50>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	793b      	ldrb	r3, [r7, #4]
 8000948:	f362 0341 	bfi	r3, r2, #1, #1
 800094c:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = (SPI2->SPI_SR & (1<<4) >> 4 );
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <SPI2_IRQHandler+0x50>)
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	793b      	ldrb	r3, [r7, #4]
 800095a:	f362 0382 	bfi	r3, r2, #2, #1
 800095e:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <SPI2_IRQHandler+0x54>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	7938      	ldrb	r0, [r7, #4]
 8000968:	4798      	blx	r3
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40003800 	.word	0x40003800
 8000978:	2000001c 	.word	0x2000001c

0800097c <MCAL_UART_Init>:

//-------------------------------------------------
// GENERIC FUNCTIONS
//-------------------------------------------------
void MCAL_UART_Init 		(USART_TypeDef *USARTx, UART_Config_t *UART_Config)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
	uint32_t pclk , BRR ;
	Global_UART_Config = UART_Config;
 8000986:	4a57      	ldr	r2, [pc, #348]	; (8000ae4 <MCAL_UART_Init+0x168>)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	6013      	str	r3, [r2, #0]

	//enable clock
	if(USARTx == USART1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a56      	ldr	r2, [pc, #344]	; (8000ae8 <MCAL_UART_Init+0x16c>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d106      	bne.n	80009a2 <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000994:	4b55      	ldr	r3, [pc, #340]	; (8000aec <MCAL_UART_Init+0x170>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a54      	ldr	r2, [pc, #336]	; (8000aec <MCAL_UART_Init+0x170>)
 800099a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	e014      	b.n	80009cc <MCAL_UART_Init+0x50>
	else if(USARTx == USART2)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a52      	ldr	r2, [pc, #328]	; (8000af0 <MCAL_UART_Init+0x174>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d106      	bne.n	80009b8 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 80009aa:	4b50      	ldr	r3, [pc, #320]	; (8000aec <MCAL_UART_Init+0x170>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a4f      	ldr	r2, [pc, #316]	; (8000aec <MCAL_UART_Init+0x170>)
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	e009      	b.n	80009cc <MCAL_UART_Init+0x50>
	else if(USARTx == USART3)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a4e      	ldr	r2, [pc, #312]	; (8000af4 <MCAL_UART_Init+0x178>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d105      	bne.n	80009cc <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 80009c0:	4b4a      	ldr	r3, [pc, #296]	; (8000aec <MCAL_UART_Init+0x170>)
 80009c2:	69db      	ldr	r3, [r3, #28]
 80009c4:	4a49      	ldr	r2, [pc, #292]	; (8000aec <MCAL_UART_Init+0x170>)
 80009c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ca:	61d3      	str	r3, [r2, #28]

	//enable USART Module
	USARTx->CR1 |= 1<<13 ;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	60da      	str	r2, [r3, #12]

	//enable TX and Rx: USART_MODE
	USARTx->CR1 |= UART_Config->USART_MODE;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	431a      	orrs	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60da      	str	r2, [r3, #12]

	//Payload
	USARTx->CR1 |= UART_Config->Payload_Length;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	7a12      	ldrb	r2, [r2, #8]
 80009ee:	431a      	orrs	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	60da      	str	r2, [r3, #12]

	//Parity
	USARTx->CR1 |= UART_Config->Parity;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	7a52      	ldrb	r2, [r2, #9]
 80009fc:	431a      	orrs	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	60da      	str	r2, [r3, #12]

	//Stop Bits
	USARTx->CR2 |= UART_Config->StopBits;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	691b      	ldr	r3, [r3, #16]
 8000a06:	683a      	ldr	r2, [r7, #0]
 8000a08:	7a92      	ldrb	r2, [r2, #10]
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	611a      	str	r2, [r3, #16]

	//Flow Control
	USARTx->CR3 |= UART_Config->FlowCTRL;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	683a      	ldr	r2, [r7, #0]
 8000a16:	7ad2      	ldrb	r2, [r2, #11]
 8000a18:	431a      	orrs	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	615a      	str	r2, [r3, #20]

	//Baud Rate
	//PCLK1 for USART 2 ,3
	//PCLK2 for USART 1

	if(USARTx == USART1)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a31      	ldr	r2, [pc, #196]	; (8000ae8 <MCAL_UART_Init+0x16c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d103      	bne.n	8000a2e <MCAL_UART_Init+0xb2>
		pclk = MCAL_RCC_Get_PCLK2_FREQ();
 8000a26:	f7ff fda7 	bl	8000578 <MCAL_RCC_Get_PCLK2_FREQ>
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	e002      	b.n	8000a34 <MCAL_UART_Init+0xb8>
	else
		pclk = MCAL_RCC_Get_PCLK1_FREQ();
 8000a2e:	f7ff fd8f 	bl	8000550 <MCAL_RCC_Get_PCLK1_FREQ>
 8000a32:	60f8      	str	r0, [r7, #12]

	BRR = UART_BRR_REG(pclk , UART_Config->BAUDRATE);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	011b      	lsls	r3, r3, #4
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a40:	0119      	lsls	r1, r3, #4
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4613      	mov	r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	009a      	lsls	r2, r3, #2
 8000a4c:	441a      	add	r2, r3
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	011b      	lsls	r3, r3, #4
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8000a64:	2064      	movs	r0, #100	; 0x64
 8000a66:	fb00 f303 	mul.w	r3, r0, r3
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	011b      	lsls	r3, r3, #4
 8000a6e:	4a22      	ldr	r2, [pc, #136]	; (8000af8 <MCAL_UART_Init+0x17c>)
 8000a70:	fba2 2303 	umull	r2, r3, r2, r3
 8000a74:	095b      	lsrs	r3, r3, #5
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	430b      	orrs	r3, r1
 8000a7c:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68ba      	ldr	r2, [r7, #8]
 8000a82:	609a      	str	r2, [r3, #8]


	//enable Interrupt
	if(UART_Config->IRQ_En != UART_IRQ_EN_None)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	7b1b      	ldrb	r3, [r3, #12]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d026      	beq.n	8000ada <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UART_Config->IRQ_En);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	7b12      	ldrb	r2, [r2, #12]
 8000a94:	431a      	orrs	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60da      	str	r2, [r3, #12]

		//enable NVIC for USARTx IRQ
		if(USARTx == USART1)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MCAL_UART_Init+0x16c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d106      	bne.n	8000ab0 <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MCAL_UART_Init+0x180>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a15      	ldr	r2, [pc, #84]	; (8000afc <MCAL_UART_Init+0x180>)
 8000aa8:	f043 0320 	orr.w	r3, r3, #32
 8000aac:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_Enable;
		else if (USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;
	}

}
 8000aae:	e014      	b.n	8000ada <MCAL_UART_Init+0x15e>
		else if (USARTx == USART2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <MCAL_UART_Init+0x174>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d106      	bne.n	8000ac6 <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable;
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MCAL_UART_Init+0x180>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <MCAL_UART_Init+0x180>)
 8000abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	e009      	b.n	8000ada <MCAL_UART_Init+0x15e>
		else if (USARTx == USART3)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <MCAL_UART_Init+0x178>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d105      	bne.n	8000ada <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MCAL_UART_Init+0x180>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <MCAL_UART_Init+0x180>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000024 	.word	0x20000024
 8000ae8:	40013800 	.word	0x40013800
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40014400 	.word	0x40014400
 8000af4:	40014800 	.word	0x40014800
 8000af8:	51eb851f 	.word	0x51eb851f
 8000afc:	e000e104 	.word	0xe000e104

08000b00 <MCAL_UART_GPIO_SetPins>:
	}
}


void MCAL_UART_GPIO_SetPins (USART_TypeDef *USARTx)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;
	//USART1
	if(USARTx == USART1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a2a      	ldr	r2, [pc, #168]	; (8000bb4 <MCAL_UART_GPIO_SetPins+0xb4>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d117      	bne.n	8000b40 <MCAL_UART_GPIO_SetPins+0x40>
	{
		//PA9  	TX  MODE:Alternate function PushPull
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b14:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000b16:	2306      	movs	r3, #6
 8000b18:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4619      	mov	r1, r3
 8000b24:	4824      	ldr	r0, [pc, #144]	; (8000bb8 <MCAL_UART_GPIO_SetPins+0xb8>)
 8000b26:	f000 f920 	bl	8000d6a <MCAL_GPIO_Init>

		//PA10	RX	MODE:Input floating pull up
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8000b30:	2308      	movs	r3, #8
 8000b32:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	481f      	ldr	r0, [pc, #124]	; (8000bb8 <MCAL_UART_GPIO_SetPins+0xb8>)
 8000b3c:	f000 f915 	bl	8000d6a <MCAL_GPIO_Init>
		}

	}

	//USART2
	if(USARTx == USART1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <MCAL_UART_GPIO_SetPins+0xb4>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d115      	bne.n	8000b74 <MCAL_UART_GPIO_SetPins+0x74>
	{
		//PA2  	TX  MODE:Alternate function PushPull
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000b50:	2301      	movs	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <MCAL_UART_GPIO_SetPins+0xb8>)
 8000b5c:	f000 f905 	bl	8000d6a <MCAL_GPIO_Init>

		//PA3	RX	MODE:Input floating pull up
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000b60:	2308      	movs	r3, #8
 8000b62:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8000b64:	2308      	movs	r3, #8
 8000b66:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4812      	ldr	r0, [pc, #72]	; (8000bb8 <MCAL_UART_GPIO_SetPins+0xb8>)
 8000b70:	f000 f8fb 	bl	8000d6a <MCAL_GPIO_Init>
		}

	}

	//USART3
	if(USARTx == USART1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <MCAL_UART_GPIO_SetPins+0xb4>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d117      	bne.n	8000bac <MCAL_UART_GPIO_SetPins+0xac>
	{
		//PB10  	TX  MODE:Alternate function PushPull
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b80:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000b82:	2306      	movs	r3, #6
 8000b84:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000b86:	2301      	movs	r3, #1
 8000b88:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480a      	ldr	r0, [pc, #40]	; (8000bbc <MCAL_UART_GPIO_SetPins+0xbc>)
 8000b92:	f000 f8ea 	bl	8000d6a <MCAL_GPIO_Init>

		//PB11	RX	MODE:Input floating pull up
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000b96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b9a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MCAL_UART_GPIO_SetPins+0xbc>)
 8000ba8:	f000 f8df 	bl	8000d6a <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}

	}
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40013800 	.word	0x40013800
 8000bb8:	40010800 	.word	0x40010800
 8000bbc:	40010c00 	.word	0x40010c00

08000bc0 <MCAL_UART_SendData>:


void MCAL_UART_SendData 	(USART_TypeDef *USARTx, uint16_t *pTxBuffer, enum Polling_Mechanism PollingEn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	71fb      	strb	r3, [r7, #7]
	if(PollingEn == Enable)
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d106      	bne.n	8000be2 <MCAL_UART_SendData+0x22>
		while (!(USARTx->SR & (1<<7)));
 8000bd4:	bf00      	nop
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d0f9      	beq.n	8000bd6 <MCAL_UART_SendData+0x16>

	if(Global_UART_Config->Payload_Length == UART_PayloadLength_9b)
		USARTx->DR |= (*pTxBuffer & (uint16_t)0x01FF);
	else if(Global_UART_Config->Payload_Length == UART_PayloadLength_8b)
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MCAL_UART_SendData+0x48>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	7a1b      	ldrb	r3, [r3, #8]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d107      	bne.n	8000bfc <MCAL_UART_SendData+0x3c>
		USARTx->DR |= (*pTxBuffer & (uint8_t)0xFF);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	605a      	str	r2, [r3, #4]

}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000024 	.word	0x20000024

08000c0c <MCAL_UART_ReceiveData>:


void MCAL_UART_ReceiveData 	(USART_TypeDef *USARTx, uint16_t *pTxBuffer, enum Polling_Mechanism PollingEn)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	4613      	mov	r3, r2
 8000c18:	71fb      	strb	r3, [r7, #7]
	if(PollingEn == Enable)
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d106      	bne.n	8000c2e <MCAL_UART_ReceiveData+0x22>
		while(!(USARTx->SR & (1<<5)));
 8000c20:	bf00      	nop
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f003 0320 	and.w	r3, r3, #32
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f9      	beq.n	8000c22 <MCAL_UART_ReceiveData+0x16>
			*((uint16_t *)pTxBuffer) = (USARTx->DR & (uint8_t)0xFF);
	}

	else
	{
		if(Global_UART_Config->Payload_Length == UART_Parity_Disable)
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <MCAL_UART_ReceiveData+0x58>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	7a1b      	ldrb	r3, [r3, #8]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d107      	bne.n	8000c48 <MCAL_UART_ReceiveData+0x3c>
			*((uint16_t *)pTxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	801a      	strh	r2, [r3, #0]
		else
			*((uint16_t *)pTxBuffer) = (USARTx->DR & (uint8_t)0x7F);
	}
}
 8000c46:	e007      	b.n	8000c58 <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t *)pTxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	801a      	strh	r2, [r3, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000024 	.word	0x20000024

08000c68 <USART1_IRQHandler>:
}


//ISR
void USART1_IRQHandler (void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000c6c:	4b02      	ldr	r3, [pc, #8]	; (8000c78 <USART1_IRQHandler+0x10>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	4798      	blx	r3
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000024 	.word	0x20000024

08000c7c <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000c80:	4b02      	ldr	r3, [pc, #8]	; (8000c8c <USART2_IRQHandler+0x10>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	4798      	blx	r3
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000024 	.word	0x20000024

08000c90 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <USART3_IRQHandler+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	4798      	blx	r3
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000024 	.word	0x20000024

08000ca4 <Get_CRLH_POSITION>:
 */

#include <Stm32_F103C6_gpio_driver.h>

uint8_t Get_CRLH_POSITION(uint16_t PinNumber)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	2b80      	cmp	r3, #128	; 0x80
 8000cb2:	d042      	beq.n	8000d3a <Get_CRLH_POSITION+0x96>
 8000cb4:	2b80      	cmp	r3, #128	; 0x80
 8000cb6:	dc11      	bgt.n	8000cdc <Get_CRLH_POSITION+0x38>
 8000cb8:	2b08      	cmp	r3, #8
 8000cba:	d036      	beq.n	8000d2a <Get_CRLH_POSITION+0x86>
 8000cbc:	2b08      	cmp	r3, #8
 8000cbe:	dc06      	bgt.n	8000cce <Get_CRLH_POSITION+0x2a>
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d02e      	beq.n	8000d22 <Get_CRLH_POSITION+0x7e>
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d02e      	beq.n	8000d26 <Get_CRLH_POSITION+0x82>
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d028      	beq.n	8000d1e <Get_CRLH_POSITION+0x7a>
 8000ccc:	e047      	b.n	8000d5e <Get_CRLH_POSITION+0xba>
 8000cce:	2b20      	cmp	r3, #32
 8000cd0:	d02f      	beq.n	8000d32 <Get_CRLH_POSITION+0x8e>
 8000cd2:	2b40      	cmp	r3, #64	; 0x40
 8000cd4:	d02f      	beq.n	8000d36 <Get_CRLH_POSITION+0x92>
 8000cd6:	2b10      	cmp	r3, #16
 8000cd8:	d029      	beq.n	8000d2e <Get_CRLH_POSITION+0x8a>
 8000cda:	e040      	b.n	8000d5e <Get_CRLH_POSITION+0xba>
 8000cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ce0:	d033      	beq.n	8000d4a <Get_CRLH_POSITION+0xa6>
 8000ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ce6:	dc09      	bgt.n	8000cfc <Get_CRLH_POSITION+0x58>
 8000ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cec:	d029      	beq.n	8000d42 <Get_CRLH_POSITION+0x9e>
 8000cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf2:	d028      	beq.n	8000d46 <Get_CRLH_POSITION+0xa2>
 8000cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cf8:	d021      	beq.n	8000d3e <Get_CRLH_POSITION+0x9a>
 8000cfa:	e030      	b.n	8000d5e <Get_CRLH_POSITION+0xba>
 8000cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d00:	d027      	beq.n	8000d52 <Get_CRLH_POSITION+0xae>
 8000d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d06:	dc03      	bgt.n	8000d10 <Get_CRLH_POSITION+0x6c>
 8000d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d0c:	d01f      	beq.n	8000d4e <Get_CRLH_POSITION+0xaa>
 8000d0e:	e026      	b.n	8000d5e <Get_CRLH_POSITION+0xba>
 8000d10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d14:	d01f      	beq.n	8000d56 <Get_CRLH_POSITION+0xb2>
 8000d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d1a:	d01e      	beq.n	8000d5a <Get_CRLH_POSITION+0xb6>
 8000d1c:	e01f      	b.n	8000d5e <Get_CRLH_POSITION+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e01e      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000d22:	2304      	movs	r3, #4
 8000d24:	e01c      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000d26:	2308      	movs	r3, #8
 8000d28:	e01a      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	e018      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000d2e:	2310      	movs	r3, #16
 8000d30:	e016      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000d32:	2314      	movs	r3, #20
 8000d34:	e014      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000d36:	2318      	movs	r3, #24
 8000d38:	e012      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000d3a:	231c      	movs	r3, #28
 8000d3c:	e010      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e00e      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000d42:	2304      	movs	r3, #4
 8000d44:	e00c      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000d46:	2308      	movs	r3, #8
 8000d48:	e00a      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	e008      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000d4e:	2310      	movs	r3, #16
 8000d50:	e006      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000d52:	2314      	movs	r3, #20
 8000d54:	e004      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000d56:	2318      	movs	r3, #24
 8000d58:	e002      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000d5a:	231c      	movs	r3, #28
 8000d5c:	e000      	b.n	8000d60 <Get_CRLH_POSITION+0xbc>
		break;
	}
	return 0;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <MCAL_GPIO_Init>:


void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 8000d6a:	b590      	push	{r4, r7, lr}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
	//Port configuration register Low (GPIO_CRL) Configure Pins from 0 to 7
	//Port configuration register High (GPIO_CRH) Configure Pins from 8 to 15

	volatile uint32_t *configregister = NULL ;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Conf = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	2bff      	cmp	r3, #255	; 0xff
 8000d82:	d801      	bhi.n	8000d88 <MCAL_GPIO_Init+0x1e>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	e001      	b.n	8000d8c <MCAL_GPIO_Init+0x22>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	60bb      	str	r3, [r7, #8]

	//clear CNFx and MODEx
	(*configregister) &= ~(0xf << Get_CRLH_POSITION(PinConfig->GPIO_PinNumber));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff86 	bl	8000ca4 <Get_CRLH_POSITION>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	4093      	lsls	r3, r2
 8000da0:	43da      	mvns	r2, r3
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	401a      	ands	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if(		PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD 	||
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	789b      	ldrb	r3, [r3, #2]
 8000db0:	2b07      	cmp	r3, #7
 8000db2:	d00b      	beq.n	8000dcc <MCAL_GPIO_Init+0x62>
			PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP 	||
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	789b      	ldrb	r3, [r3, #2]
	if(		PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD 	||
 8000db8:	2b06      	cmp	r3, #6
 8000dba:	d007      	beq.n	8000dcc <MCAL_GPIO_Init+0x62>
			PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD 	||
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	789b      	ldrb	r3, [r3, #2]
			PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP 	||
 8000dc0:	2b05      	cmp	r3, #5
 8000dc2:	d003      	beq.n	8000dcc <MCAL_GPIO_Init+0x62>
			PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP )
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	789b      	ldrb	r3, [r3, #2]
			PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD 	||
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d10e      	bne.n	8000dea <MCAL_GPIO_Init+0x80>
	{
		//set CNFx and MODEx
		Pin_Conf = (((PinConfig->GPIO_Mode - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	789b      	ldrb	r3, [r3, #2]
 8000dd0:	3b04      	subs	r3, #4
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	b25a      	sxtb	r2, r3
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	78db      	ldrb	r3, [r3, #3]
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	e02c      	b.n	8000e44 <MCAL_GPIO_Init+0xda>
	}
	//if Pin in input
	else //Mode == 00
	{
		if(PinConfig->GPIO_Mode == GPIO_MODE_ANALOG || PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	789b      	ldrb	r3, [r3, #2]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <MCAL_GPIO_Init+0x90>
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	789b      	ldrb	r3, [r3, #2]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d107      	bne.n	8000e0a <MCAL_GPIO_Init+0xa0>
		{
			//set CNFx and MODEx
			Pin_Conf = ((PinConfig->GPIO_Mode << 2) | 0x0) & 0x0f;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	789b      	ldrb	r3, [r3, #2]
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e01c      	b.n	8000e44 <MCAL_GPIO_Init+0xda>
		}
		else if(PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT) // consider it as input floating
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	789b      	ldrb	r3, [r3, #2]
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d102      	bne.n	8000e18 <MCAL_GPIO_Init+0xae>
		{
			//set CNFx and MODEx
			Pin_Conf = ((GPIO_MODE_INPUT_FLO << 2) | 0x0) & 0x0f;
 8000e12:	2304      	movs	r3, #4
 8000e14:	73fb      	strb	r3, [r7, #15]
 8000e16:	e015      	b.n	8000e44 <MCAL_GPIO_Init+0xda>
		}
		else //PU and PD Input
		{
			Pin_Conf = ((GPIO_MODE_INPUT_PU << 2) | 0x0) & 0x0f;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	789b      	ldrb	r3, [r3, #2]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d107      	bne.n	8000e34 <MCAL_GPIO_Init+0xca>
			{
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	8812      	ldrh	r2, [r2, #0]
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	e007      	b.n	8000e44 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	8812      	ldrh	r2, [r2, #0]
 8000e3c:	43d2      	mvns	r2, r2
 8000e3e:	401a      	ands	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	60da      	str	r2, [r3, #12]
			}
		}
	}

	*configregister |= ((Pin_Conf) << Get_CRLH_POSITION(PinConfig->GPIO_PinNumber));
 8000e44:	7bfc      	ldrb	r4, [r7, #15]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff2a 	bl	8000ca4 <Get_CRLH_POSITION>
 8000e50:	4603      	mov	r3, r0
 8000e52:	fa04 f203 	lsl.w	r2, r4, r3
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	601a      	str	r2, [r3, #0]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd90      	pop	{r4, r7, pc}

08000e68 <MCAL_GPIO_WritePin>:
	return PortValue;
}


void MCAL_GPIO_WritePin	(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
 8000e74:	4613      	mov	r3, r2
 8000e76:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_reset)
 8000e78:	787b      	ldrb	r3, [r7, #1]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <MCAL_GPIO_WritePin+0x1e>
//		or
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->ODR = PinNumber;
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	60da      	str	r2, [r3, #12]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->ODR &= ~PinNumber;
	}
}
 8000e84:	e006      	b.n	8000e94 <MCAL_GPIO_WritePin+0x2c>
		GPIOx->ODR &= ~PinNumber;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	43d2      	mvns	r2, r2
 8000e8e:	401a      	ands	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	60da      	str	r2, [r3, #12]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
	...

08000ea0 <__libc_init_array>:
 8000ea0:	b570      	push	{r4, r5, r6, lr}
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	4e0c      	ldr	r6, [pc, #48]	; (8000ed8 <__libc_init_array+0x38>)
 8000ea6:	4c0d      	ldr	r4, [pc, #52]	; (8000edc <__libc_init_array+0x3c>)
 8000ea8:	1ba4      	subs	r4, r4, r6
 8000eaa:	10a4      	asrs	r4, r4, #2
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	d109      	bne.n	8000ec4 <__libc_init_array+0x24>
 8000eb0:	f000 f81a 	bl	8000ee8 <_init>
 8000eb4:	2500      	movs	r5, #0
 8000eb6:	4e0a      	ldr	r6, [pc, #40]	; (8000ee0 <__libc_init_array+0x40>)
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ee4 <__libc_init_array+0x44>)
 8000eba:	1ba4      	subs	r4, r4, r6
 8000ebc:	10a4      	asrs	r4, r4, #2
 8000ebe:	42a5      	cmp	r5, r4
 8000ec0:	d105      	bne.n	8000ece <__libc_init_array+0x2e>
 8000ec2:	bd70      	pop	{r4, r5, r6, pc}
 8000ec4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ec8:	4798      	blx	r3
 8000eca:	3501      	adds	r5, #1
 8000ecc:	e7ee      	b.n	8000eac <__libc_init_array+0xc>
 8000ece:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ed2:	4798      	blx	r3
 8000ed4:	3501      	adds	r5, #1
 8000ed6:	e7f2      	b.n	8000ebe <__libc_init_array+0x1e>
 8000ed8:	08000f18 	.word	0x08000f18
 8000edc:	08000f18 	.word	0x08000f18
 8000ee0:	08000f18 	.word	0x08000f18
 8000ee4:	08000f1c 	.word	0x08000f1c

08000ee8 <_init>:
 8000ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eea:	bf00      	nop
 8000eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eee:	bc08      	pop	{r3}
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	4770      	bx	lr

08000ef4 <_fini>:
 8000ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef6:	bf00      	nop
 8000ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efa:	bc08      	pop	{r3}
 8000efc:	469e      	mov	lr, r3
 8000efe:	4770      	bx	lr
